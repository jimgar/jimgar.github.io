{
  "hash": "ddbb33266383baee8b129d4e1f0b041f",
  "result": {
    "markdown": "---\ntitle: \"Making the terminal zsh-tosh on macOS\"\ndescription: \"My favourite command line tools with zsh\"\nauthor:\n  - name: Jim Gardner\n    url: https://jimgar.github.io/jimgar/\ndate: 2023-10-12\ncategories: [terminal, zsh, command line, macOS, bat, eza, ohmyzsh]\nengine: knitr\nnumber-sections: true\ndraft: false\n---\n\n::: {.cell}\n<style type=\"text/css\">\n.figure-caption {\n    text-align: center;\n}\n\n.center {\n    text-align: center;\n}\n</style>\n:::\n\n\n## Overview\n\nIn this post I'm going to share a few tools that have made my zsh terminal experience on macOS a little bit nicer.\n\nThere's two separate sets of tools. One is to [Oh My Zsh](https://github.com/ohmyzsh/ohmyzsh) with a couple of plugins. The other are so-called modern versions of a couple of commonly used command line tools. The purpose of all these tools is to make the terminal colourful and easier to use.\n\nAll of the changes here will also apply to terminals in VS Code. If you're an R programmer using RStudio, I'm ~~sorry, that's not a nice thing people like us get to have :(~~ a fool! Of course this is possible - though not the default. See @sec-rstudio to see how to make it so.\n\n## Installation quick ref\n\nAssuming you are putting installs in default locations\n\n### zsh stuff\n\n- Install [zsh](https://github.com/ohmyzsh/ohmyzsh#basic-installation) (if you need to)\n\n::: {.cell}\n\n```{.bash .cell-code}\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n:::\n\n- Install [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n```\n:::\n\n- Install [zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md)\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git\necho \"source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ${ZDOTDIR:-$HOME}/.zshrc\n```\n:::\n\n- Update zshrc\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Add the autosuggestions and highliting to the plugins variable like so\n\nplugins=(\n   git\n   zsh-autosuggestions\n   zsh-syntax-highlighting\n)\n```\n:::\n\n- Source\n\n::: {.cell}\n\n```{.bash .cell-code}\nsource ~/.zshrc\n```\n:::\n\n\n### cli tools\n\nRequire [homebrew](https://brew.sh)\n\n- Install [eza](https://github.com/eza-community/eza/blob/main/INSTALL.md#brew-macos)\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install eza\n```\n:::\n\n- Install [bat](https://github.com/sharkdp/bat#on-macos-or-linux-via-homebrew)\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install bat\n```\n:::\n\n\n`exit` your terminal session and start a new one.\n\n## Context\n\n### zsh\n\nzsh has come as the default shell for mac's terminal since October 2019, with the release of macOS Catalina.\n\nThe standard experience is perfectly fine, just like bash, but is rather bare bones. There's no syntax highlighting even for the native shell scripting. In fact, everything is black-and-white by default. I'm not down on zsh or bash as they are. I just prefer some colour to help visually parse wtf I'm looking at.\n\nIf you're unsure you have it, run the following to check. You should see something similar to my output.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nzsh --version\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nzsh 5.9 (x86_64-apple-darwin23.0)\n```\n:::\n:::\n\n\nAlso run this to check that it's your default shell. You should see the same output as I have here.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $SHELL\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n/bin/zsh\n```\n:::\n:::\n\n\nIf you get `command not found` or the default shell is something else (like bash), follow the instructions [here](https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH) to install zsh and make it your default.\n\n### Oh My Zsh\n\n[Oh My Zsh](https://github.com/ohmyzsh/ohmyzsh) makes the terminal a bit more colourful and can show you things like which git branch you're on. I've found it quite useful for that alone, and it is really easy to install, with a great default theme. \n\nzsh has a config file, typically found at `~/.zshrc`. What Oh My Zsh does is essentially modify your .zshrc, putting some defaults in and setting things up to further configure as you see fit.\n\n![Once installed, you will see something like this](images/zsh.png){fig-align=\"center\"}\n\nIt doesn't look like a lot, true. \n\n![But once you actually start doing something...](images/zsh2.png){fig-align=\"center\"}\n\nYou can see the shortened current directory, which git branch I'm on (\"zsh\", that I'm working in for this blog post), and some colour when calling `ls -l`.\n\nOh My Zsh also has loads of [plugins](https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins) to enhance functionality. Most are for working with common tools, languages and frameworks for developers. The plugins I've enabled are for syntax highlighting and autosuggestions. The syntax highlighting is nice because if I'm writing a little shell script, or piping a bunch of commands together, it helps me to more quickly visually parse the content. The autosuggestions are a bit like tab completion, but they use your execution history to autosuggest what might come next. This can be useful if you're doing a repetitive workflow like making regular git commits, or moving back and forth between a small number of directories.\n\n![After adding the plugins to my zshrc using the `nano` editor, you can see there's now syntax highlighting in this `for` loop.](images/syntax-highlighting.png){fig-align=\"center\"}\n\n![Here's an example of an autosuggestion. If I hit the right arrow key it would accept the suggestion.](images/autosuggestions.png){fig-align=\"center\"}\n\n### bat and eza\n\nBoth [bat](https://github.com/sharkdp/bat) and [eza](https://github.com/eza-community/eza) are \"modern\" versions of the classic command line tools `cat` and `ls`, respectively. The former is for printing the contents of files, and the latter is for listing files and directories.\n\nbat is particularly nice for several reasons. Let's look at the contents of my zshrc with cat first\n\n![zshrc printed with cat](images/cat.png){fig-align=\"center\"}\n\nThe output is single-colour, printed via stdout, in full. It's literally just a dump of the file contents to the screen. Compare that to bat\n\n![zshrc printed with bat](images/bat.png){fig-align=\"center\"}\n\nThat's more like it. We've got syntax highlighting, and the print is paginated a la `less`. There's more though - if you have git it shows modifications in the sidebar, it can show all non-printable characters, concatenate files together, and when used in pipes will behave as a drop-in replacement for cat. So all around pretty awesome.\n\neza I like for two reasons. \n\nFirst, yes, it's colour again. You can see in the image below that the return values for `eza -l` are colourised in comparison to `ls -l`. And I always use the `-l` flag, so that matters to me.\n\nSecond is the tree flag `-T`. Sometimes a simple tree is all you need to see a project's structure. The really nice thing about `-T` is you can combine it with `-L` (level), and specify a depth. For example if I only wanted to show stuff in the root of my current directory, I can do `eza -TL=1`. You may also have noticed that the trees are colourised ðŸ‘€\n\n![Examples of using eza](images/eza.png){fig-align=\"center\"}\n\n## RStudio settings {#sec-rstudio}\n\nIt's really simple to make zsh the default terminal in RStudio.\n\n![In the Terminal tab, click the down arrow next to `Terminal n`. Then click `Terminal Options`](images/rstudio1.png){fig-align=\"center\"}\n\n\n![New terminals open with: zsh. Then click `Apply`, and `OK`](images/rstudio2.png){fig-align=\"center\"}\n\n\n![Start a new terminal and there you go!](images/rstudio3.png){fig-align=\"center\"}\n\n## Conclusion\n\nGo get some colour in your terminal ;)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}