[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "~ blog",
    "section": "",
    "text": "This is my personal blog. While I may showcase some of my professional work and learning, any opinions expressed are mine alone!\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nCPD for July 2025\n\n\n4 min\n\n\n\nPython\n\n\nAdvent of Code\n\n\nAdvent of Code 2024\n\n\nPolars\n\n\nuv\n\n\n\nA grab bag of stuff\n\n\n\nJul 11, 2025\n\n\n\n\n\n7/11/25, 8:56:21 PM\n\n\n\n\n\n\n\n\n\n\n\nAccessing R HTML help pages from outside a container\n\n\n5 min\n\n\n\nR\n\n\nQuarto\n\n\nPython\n\n\nNeovim\n\n\nContainer\n\n\nDocker\n\n\nPodman\n\n\n\nSolved by an R legend (not me)\n\n\n\nMay 9, 2025\n\n\n\n\n\n7/11/25, 5:35:15 PM\n\n\n\n\n\n\n\n\n\n\n\nA containerised Neovim dev environment for R and Quarto\n\n\n12 min\n\n\n\nR\n\n\nQuarto\n\n\nPython\n\n\nNeovim\n\n\nContainer\n\n\nDocker\n\n\nPodman\n\n\n\nI got nerd-sniped.\n\n\n\nMay 1, 2025\n\n\n\n\n\n5/2/25, 12:42:53 AM\n\n\n\n\n\n\n\n\n\n\n\nLearning Neovim is Hard\n\n\n7 min\n\n\n\nR\n\n\nPython\n\n\nNeovim\n\n\nVS Code\n\n\n\nTrying to orient myself in the Neovim landscape proved harder than I anticipated\n\n\n\nMar 24, 2025\n\n\n\n\n\n5/1/25, 9:35:36 PM\n\n\n\n\n\n\n\n\n\n\n\nVS Code for R on macOS\n\n\n15 min\n\n\n\nVS Code\n\n\nVisual Studio Code\n\n\nR\n\n\n\nMore or less everything you need to know to get started\n\n\n\nDec 20, 2023\n\n\n\n\n\n1/20/25, 11:36:10 AM\n\n\n\n\n\n\n\n\n\n\n\nDay 3 - Advent of Code 2023\n\n\n9 min\n\n\n\nR\n\n\nbase R\n\n\nAdvent of Code\n\n\nAdvent of Code 2023\n\n\n\nCommitment to a data structure\n\n\n\nDec 15, 2023\n\n\n\n\n\n1/20/25, 11:36:10 AM\n\n\n\n\n\n\n\n\n\n\n\nDay 2 - Advent of Code 2023\n\n\n15 min\n\n\n\nR\n\n\nbase R\n\n\nAdvent of Code\n\n\nAdvent of Code 2023\n\n\n\nIn which we compare multiple solutions.\n\n\n\nDec 10, 2023\n\n\n\n\n\n1/20/25, 11:36:10 AM\n\n\n\n\n\n\n\n\n\n\n\nDay 1 - Advent of Code 2023\n\n\n5 min\n\n\n\nR\n\n\nAdvent of Code\n\n\nAdvent of Code 2023\n\n\n\nHarder than I thought it would be. Much harder.\n\n\n\nDec 4, 2023\n\n\n\n\n\n1/20/25, 11:36:10 AM\n\n\n\n\n\n\n\n\n\n\n\nMaking the terminal zsh-tosh on macOS\n\n\n5 min\n\n\n\nterminal\n\n\nzsh\n\n\ncommand line\n\n\nmacOS\n\n\nbat\n\n\neza\n\n\nohmyzsh\n\n\n\nMy favourite command line tools with zsh\n\n\n\nOct 12, 2023\n\n\n\n\n\n1/20/25, 11:36:10 AM\n\n\n\n\n\n\n\n\n\n\n\nComfy keyboard shortcuts for RStudio\n\n\n7 min\n\n\n\nR\n\n\nRStudio\n\n\n\nAimed at beginner and intermediate users\n\n\n\nAug 4, 2023\n\n\n\n\n\n1/20/25, 11:36:10 AM\n\n\n\n\n\n\n\n\n\n\n\nPublishing content in Quarto using conditionals and if/else code flow\n\n\n6 min\n\n\n\nQuarto\n\n\nR\n\n\nknitr\n\n\n\nA selection of simple methods using the knitr engine and HTML output\n\n\n\nApr 24, 2023\n\n\n\n\n\n1/20/25, 12:20:09 PM\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/learning-neovim-is-hard/post.html#wouldnt-it-be-nice",
    "href": "posts/learning-neovim-is-hard/post.html#wouldnt-it-be-nice",
    "title": "Learning Neovim is Hard",
    "section": "Wouldn’t it be nice?",
    "text": "Wouldn’t it be nice?\nI wonder if this resonates with you? Ever read people’s LinkedIn profiles, or their blogs/websites/CVs, and think:\n\nWow. This person is absolutely incredible. They have achieved/know so much.\n\nWouldn’t it be nice if that person posted on their LinkedIn about the shitty fucking week they had trying to learn about containers for the first time? Or how that one time they had to work a weekend because they re-ran their Jupyter notebook from top to bottom and the results were completely different to what they showed their boss?\nHow about if they tried something and spent many days – weeks, months! – only to realise they just couldn’t understand it, and kinda like, gave up?\nWell that’s me with Neovim.\nI’m a mid-level programmer/Data Scientist. I’m now way beyond a total beginner, and there are actually people who look up to me as a professional. It feels unbelievable at times, but, that’s what happens when you work hard, learn, and care about the craft (and other people).\nRead on to hear the struggle."
  },
  {
    "objectID": "posts/learning-neovim-is-hard/post.html#obliterated",
    "href": "posts/learning-neovim-is-hard/post.html#obliterated",
    "title": "Learning Neovim is Hard",
    "section": "Obliterated",
    "text": "Obliterated\nWhen I started programming in March 2020 I was working in evolutionary biology. I don’t know how it is now, but back then we were using a mix of proprietary GUI-based programs and command line tools written and published by academics. That meant my introduction to programming was the command line (specifically using bash), then Python, and then R. If I needed to write a script I’d come up with a little toy dataset, open the terminal, invoke Python/R, and write every line of code myself using the vanilla REPL.\nThat’s right. There was no\n\nSyntax highlighting\nLinting\nHovers\nKeyboard shortcuts\nFormatting\n\nThere wasn’t even ‘bracketed paste’, which as I understand it just means ‘multi-line code pasting into the terminal’. It was a literal line-by-line workflow where even a for-loop had to be input and sent to the interpreter in parts.\nAt first I did it because I really didn’t know any better. As I became more aware of the options, I inevitably switched to using Spyder for Python and RStudio for R, and eventually RStudio for Python for a while (yes, really o_O).\nI’ve always been grateful for starting in the terminal though. I’ve never been afraid to fire up an R/Python REPL and do quick checks on language behaviour.\nIn fact, at times I’ve felt a little smug: I’ve had colleagues who don’t know the difference between R and RStudio. Meanwhile, I “graduated” last year to using VS Code as my main IDE. Yeehaw, I’m a cowboy riding out there in the wild west of Microsoft’s Extension Marketplace. I dazzled colleagues by rummaging around in the settings.json, pointing to an R binary for the Radian terminal. I even exposed addin_reshape() from codegrip and contributed to the docs..! Ok, I admit to being genuinely proud of that one, even if it was easy.\nThen came the vim extension for VS Code. Wow. So cool. Even though the productivity gains from vim motions are marginal at best, and the time spent trying to adjust will never be won back. But you know, the important thing at the time was it kept me engaged with programming. It also exposed me to more computer sciencey developers and low-level language practitioners. Which in turn, of course, lead me to Neovim.\nAnd Neovim obliterated any sense of smugness that I had.\nIt’s good to get in over your head every once in a while. It’s humbling."
  },
  {
    "objectID": "posts/learning-neovim-is-hard/post.html#neovim",
    "href": "posts/learning-neovim-is-hard/post.html#neovim",
    "title": "Learning Neovim is Hard",
    "section": "Neovim",
    "text": "Neovim\nIf you don’t know, Neovim (A.K.A nvim) is a text editor that can be used as an IDE. It’s a bit like VS Code in that it’s configurable, but way harder. In the nvim world people juice up the editor with extra functionality by installing plugins, most of which are written in Lua.\nApparently Lua is the easiest language ever to learn and literal children use it to make Roblox games. If you use nvim you’ll also be coding in Lua: it’s the language used for your config file/s.\nI’m not going to say that I didn’t understand anything in the config files. But I didn’t find Lua super easy to get a flavour of. I just wanted my config to work most of the time, so I would mostly look at other people’s configs – limiting my exposure to Lua as a general language. This meant whenever the config would break or I’d get unexpected behaviour I didn’t really know what to do. It turns out that knowing words is important1 when you’re learning programming.\nI also found the documentation for most plugins threadbare. Developers: Don’t assume too much of your potential users. Many of us are, frankly, morons, and many more will have a TikTok user’s attention span. You do actually need to tell us what your software does and how it can be used.\nClearly I needed more help, so I read and watched a lot of tutorials. I found typecraft, who I would like to hug. I found the mononymous TJ, nvim contributor and creator of treesitter. There is of course fellow sober addict and programming craftsman ThePrimeagen (“Primeagen mentioned!”, “Let’s go boys!!”, etc.). I watched Josean Martinez’s and Henry Misc’s guides. Probably the best series of them all was by Vhyrro, who gave examples and explained the ‘why’ of things2 for different facets of the editor – but who maddeningly never finished the video series!\nThey all helped, but in the end, it was still a huge amount of work. My knowledge wasn’t coming together. I couldn’t touch type, which is kind of a vim pre-requisite, so I tried to learn that via TypingClub. That definitely helped, but didn’t stick because it was too slow for work. Then a young 20-something on Mastodon tooted about how they were able to touch type faster than their old speed after just a month of TypingClub, and it completely unlocked nvim for them, and… I died a bit inside. Touch typing for me is honestly just super hard – even after several months.\nI’d estimate that all told I probably spent a few weeks dedicated to learning about Neovim as a tool, lots of vim motions and commands, editing and using different configs, the language server protocol, linters, formatters, stuff like that. I must have used it as an IDE for a good 3 months. There were periods that I really enjoyed it.\nI’d like to try again one day. There’s just something alluring about it. It reminds me of watching my older brother on the computer in the early 90s. The vibe appeals."
  },
  {
    "objectID": "posts/learning-neovim-is-hard/post.html#not-all-wasted",
    "href": "posts/learning-neovim-is-hard/post.html#not-all-wasted",
    "title": "Learning Neovim is Hard",
    "section": "Not all wasted",
    "text": "Not all wasted\nSo now I’m mostly using VS Code and the vim extension. I’m maybe faster in some ways than pre-nvim. One thing I like to do is open nvim in the terminal VS Code’s integrated terminal. That way I can qickly edit a file without having to open and close a new tab in the main editor.\nIt’s also given me gems like the vim ‘find and replace within highlighted text’ command: :s/find this phrase/replace with this/g.\nMaybe even better is that it started to teach me about the differences between formatters, linters, and LSPs. In reality there’s overlap between the three categories, with some LSPs using linters, or formatters that use linters, and whatever ruff does. But at least it’s not a complete mystery. Case in point, I was recently able to help someone on Mastodon with an R linting bugbear in the context of nvim – even though it’s been 6 months since I used it in earnest!\nLearning is a journey and even when it is hard, or doesn’t work out, we are bound to learn some things along the way."
  },
  {
    "objectID": "posts/learning-neovim-is-hard/post.html#footnotes",
    "href": "posts/learning-neovim-is-hard/post.html#footnotes",
    "title": "Learning Neovim is Hard",
    "section": "Footnotes",
    "text": "Footnotes\n\nSee “How to teach programming (and other things)?” by Felienne Hermans↩︎\nAgain, see Felienne’s talk. It’s important!↩︎"
  },
  {
    "objectID": "posts/advent-of-code-2023-day-3/post.html",
    "href": "posts/advent-of-code-2023-day-3/post.html",
    "title": "Day 3 - Advent of Code 2023",
    "section": "",
    "text": "AoC day 3 using base R. I got caught in the matrix 🥲\nSpoilers ahead."
  },
  {
    "objectID": "posts/advent-of-code-2023-day-3/post.html#the-problem",
    "href": "posts/advent-of-code-2023-day-3/post.html#the-problem",
    "title": "Day 3 - Advent of Code 2023",
    "section": "The problem",
    "text": "The problem\n— Day 3: Gear Ratios —\nYou and the Elf eventually reach a gondola lift station; he says the gondola lift will take you up to the water source, but this is as far as he can bring you. You go inside.\nIt doesn’t take long to find the gondolas, but there seems to be a problem: they’re not moving.\n“Aaah!”\nYou turn around to see a slightly-greasy Elf with a wrench and a look of surprise. “Sorry, I wasn’t expecting anyone! The gondola lift isn’t working right now; it’ll still be a while before I can fix it.” You offer to help.\nThe engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.\nThe engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don’t really understand, but apparently any number adjacent to a symbol, even diagonally, is a “part number” and should be included in your sum. (Periods (.) do not count as a symbol.)\nHere is an example engine schematic:\n467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\nIn this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.\nOf course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?"
  },
  {
    "objectID": "posts/advent-of-code-2023-day-3/post.html#solution",
    "href": "posts/advent-of-code-2023-day-3/post.html#solution",
    "title": "Day 3 - Advent of Code 2023",
    "section": "Solution",
    "text": "Solution\nRight, so in AoC day 1 I saw my first ever matrix. That means I now see matrices everywhere. reading the problem, I envision the schematic as a matrix, and there’s a bounding box drawn around each cluster of digits. The box encompasses all of the characters surrounding the digits, too. All I have to do is get the indices of the digits and it should be pretty simple maths from there.\n\ninput &lt;- readLines(\"input.txt\")\n\ninput[1:3]\n\n[1] \"............................................411.....................363..134.........463.775..........................506...................\"\n[2] \"......429...836..$............../..960........*.............+..........*...=....381.....*........67......426.....=..../...304...............\"\n[3] \".........*...&...641..........924..*.........855....492..495.......476.927.......*.........680...../.&....*.....713......*..................\"\n\nlength(input)\n\n[1] 140\n\nall(nchar(input) == 140)\n\n[1] TRUE\n\n\nYeah, so this thing is 140 x 140 characters. I’m now absolutely committed to the idea of it being a matrix.\n\nschematic &lt;- matrix(\n  unlist(strsplit(input, \"\")),\n  ncol = 140,\n  nrow = 140,\n  byrow = TRUE\n)\n\nschematic[1:6, 1:12]\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]\n[1,] \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"   \".\"   \".\"  \n[2,] \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \"4\"  \"2\"  \"9\"  \".\"   \".\"   \".\"  \n[3,] \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \"*\"   \".\"   \".\"  \n[4,] \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \"9\"   \"0\"   \"0\"  \n[5,] \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"   \".\"   \".\"  \n[6,] \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \"7\"  \"2\"   \"1\"   \".\"  \n\n\nAnd this is where my brain ground to a halt. I completely boxed myself in - pun not intended but very much appropriate - because I became fixated on the matrix. I didn’t want to do another list extravaganza. I kept printing the data and thinking, “It’s a fucking cube. A cube! MATRIX IS THE ANSWER!!!”\nSo yeah after a couple of hours trying to figure out how I would capture the digits, which reached a low point when I considered lapplying through every index in the matrix 💀, I knew it was time to look for “inspiration.”\nWhich came in the form of Adam Austin again. Did he use a matrix? No. But our ideas for how to solve were actually very similar. I used his approach of turning the input into a single string to unlock everything else that would make the matrix work.\nThat’s right. I still kept on with the matrix idea. We learn by doing hard things, right? Or by making things hard? Something like that… 😅\n\ninput_as_string &lt;- paste(input, collapse = \"\")\n\n# The first position for each group of numbers\nnumber_locations &lt;- gregexpr(\"\\\\d+\", input_as_string)\nnumber_locations[[1]][1:10]\n\n [1]  45  69  74  86  90 119 147 153 176 221\n\n# The actual numbers in each group\nnumbers &lt;- as.integer(regmatches(input_as_string, number_locations)[[1]])\nnumbers[1:10]\n\n [1] 411 363 134 463 775 506 429 836 960 381\n\n\n\nsymbols &lt;- regmatches(\n  input_as_string, gregexpr(\"[^0-9.]\", input_as_string)\n)[[1]] |&gt;\n  unlist() |&gt;\n  unique()\n\n  symbols\n\n [1] \"$\" \"/\" \"*\" \"+\" \"=\" \"&\" \"%\" \"#\" \"@\" \"-\"\n\n\nOnce I’ve got access to all the characters in a bounding box, I’ll need to check if at least one of them is in this vector of symbols. If so, the numbers are a “part”.\n\nparts_and_stars &lt;- Map(\n  \\(number_location, number) {\n    # Convert the first digit's index from the stringified input to its\n    # equivalent position in the schematic/matrix\n    row &lt;- ceiling(number_location / 140)\n    column &lt;- number_location - ((row - 1) * 140)\n\n    # Bounding box. Account for boxes falling outside matrix edges\n    left &lt;- if ((column - 1) == 0) 1 else column - 1\n    right &lt;- if ((column + nchar(number)) == 141) 140 else column + nchar(number)\n    top &lt;- if ((row - 1) == 0) NULL else row - 1\n    bottom &lt;- if ((row + 1) == 141) NULL else row + 1\n\n    # Collect up characters in the box\n    above &lt;- if (is.null(top)) NULL else schematic[top, left:right]\n    middle &lt;- schematic[row, left:right]\n    below &lt;- if (is.null(bottom)) NULL else schematic[bottom, left:right]\n\n    chars &lt;- c(above, middle, below)\n\n    part &lt;- if (any(symbols %in% chars)) number else NA\n\n    # For part 2. Find index of *, if it exists\n    star &lt;- NA\n\n    if (\"*\" %in% above) {\n      star &lt;- paste(top, left + (which(\"*\" == above) - 1))\n    }\n    if (\"*\" %in% middle) {\n      star &lt;- paste(row, left + (which(\"*\" == middle) - 1))\n    }\n    if (\"*\" %in% below) {\n      star &lt;- paste(bottom, left + (which(\"*\" == below) - 1))\n    }\n\n    data.frame(parts = part, stars = star)\n  },\n  number_locations[[1]],\n  numbers\n) |&gt;\n  do.call(rbind, args = _)\n\nhead(parts_and_stars)\n\n  parts stars\n1   411  2 47\n2   363  2 72\n3   134  &lt;NA&gt;\n4   463  2 89\n5   775  2 89\n6   506  &lt;NA&gt;\n\n\nTo be fair, I think this code is actually fine. It works and makes logical sense. I wasn’t too happy about including the star bit, which is for part 2 of the problem. Originally it wasn’t a part of the Map and I had to go back and add it. I’ll explain more in a moment.\n\nsum(parts_and_stars$parts, na.rm = TRUE)\n\n[1] 536202"
  },
  {
    "objectID": "posts/advent-of-code-2023-day-3/post.html#the-problem-1",
    "href": "posts/advent-of-code-2023-day-3/post.html#the-problem-1",
    "title": "Day 3 - Advent of Code 2023",
    "section": "The problem",
    "text": "The problem\n— Part Two —\nThe engineer finds the missing part and installs it in the engine! As the engine springs to life, you jump in the closest gondola, finally ready to ascend to the water source.\nYou don’t seem to be going very fast, though. Maybe something is still wrong? Fortunately, the gondola has a phone labeled “help”, so you pick it up and the engineer answers.\nBefore you can explain the situation, she suggests that you look out the window. There stands the engineer, holding a phone in one hand and waving with the other. You’re going so slowly that you haven’t even left the station. You exit the gondola.\nThe missing part wasn’t the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.\nThis time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.\nConsider the same engine schematic again:\n467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\nIn this schematic, there are two gears. The first is in the top left; it has part numbers 467 and 35, so its gear ratio is 16345. The second gear is in the lower right; its gear ratio is 451490. (The * adjacent to 617 is not a gear because it is only adjacent to one part number.) Adding up all of the gear ratios produces 467835.\nWhat is the sum of all of the gear ratios in your engine schematic?"
  },
  {
    "objectID": "posts/advent-of-code-2023-day-3/post.html#solution-1",
    "href": "posts/advent-of-code-2023-day-3/post.html#solution-1",
    "title": "Day 3 - Advent of Code 2023",
    "section": "Solution",
    "text": "Solution\nA gear is a star that’s in the bounding box of two parts. I was already tracking the potential parts in the Map, so I also grabbed the indices of any star that appeared. As a reminder, here’s the dataframe I’m working with\n\nhead(parts_and_stars)\n\n  parts stars\n1   411  2 47\n2   363  2 72\n3   134  &lt;NA&gt;\n4   463  2 89\n5   775  2 89\n6   506  &lt;NA&gt;\n\n\nThe index of a star is unique. It’s basically an ID. So if a star’s ID appears more than once next to a part, it is a gear.\n\ndupes &lt;- parts_and_stars$stars[duplicated(parts_and_stars$stars, incomparables = NA)]\ndupes[1:10]\n\n [1] \"2 89\"  \"2 47\"  \"2 72\"  \"3 10\"  \"3 36\"  \"3 82\"  \"3 107\" \"3 122\" \"4 56\" \n[10] \"4 70\" \n\ngears &lt;- parts_and_stars[parts_and_stars$stars %in% dupes, ]\ngears[1:10, ]\n\n   parts stars\n1    411  2 47\n2    363  2 72\n4    463  2 89\n5    775  2 89\n7    429  3 10\n9    960  3 36\n10   381  3 82\n12   426 3 107\n13   304 3 122\n16   855  2 47\n\nsum(aggregate(gears$parts, by = list(Stars = gears$stars), prod)$x)\n\n[1] 78272573\n\n\nEnding on an Adam Austin double-whammy: aggregate with prod inside."
  },
  {
    "objectID": "posts/cpd-jul-2025/post.html",
    "href": "posts/cpd-jul-2025/post.html",
    "title": "CPD for July 2025",
    "section": "",
    "text": "My team (Data Science) at Smart Data Foundry have started to spend an hour of CPD time together once a week. July is our first month doing it, and I figured I would use it as an excuse to blog a little bit."
  },
  {
    "objectID": "posts/cpd-jul-2025/post.html#section",
    "href": "posts/cpd-jul-2025/post.html#section",
    "title": "CPD for July 2025",
    "section": "2025-07-10",
    "text": "2025-07-10\nAdvent of Code 2024 Day 1, Part 1\nI did AoC Day 1 last year and challenged myself to only use base R. We figured this would be a nice little problem to start our sessions with.\nThis time, I wanted to try using Python. I’m kinda enjoying the language now, and between boot.dev and work am using it more than R. But! Instead of the standard library, I wanted to try using Polars and compare the solution to my base R one. Recently I’ve used Polars a fair bit for work but the operations I needed have been very simple. My spidey senses told me that if I used Polars then I’d end up learning something new.\nI also used uv, the hot new Python project/package manager, to start the project off:\n\nuv init\nuv venv\nsource venv/bin/activate\nuv add ruff\nuv add polars\n\nThat creates a few files, including a uv.lock and pyproject.toml. These essentially contain metadata such as the Python and package versions. The files can be copied into another project, or a container image, to install the same version of Python and packages with a simple uv sync.\nSolution\n\nimport polars as pl\n\n\ndf = (\n    pl.read_csv(\"aoc_day1/input.txt\", has_header=False)\n    .with_columns(\n        column_1=pl.col(\"column_1\")\n        .str.split_exact(\"   \", 1)\n        .struct.rename_fields([\"l\", \"r\"])\n    )\n    .unnest(\"column_1\")\n)\n\ndf = df.with_columns(\n    l=pl.col(\"l\").cast(pl.Int32).sort(),\n    r=pl.col(\"r\").cast(pl.Int32).sort(),\n)\n\nres = df.select((pl.col(\"r\") - pl.col(\"l\")).abs().sum()).item()\n\nprint(res)\n\nComparing to the R version of the code:\n\ndf &lt;- read.table(\"2024/01-input.txt\", col.names = c(\"l\", \"r\"))\n\ndf$l &lt;- sort(df$l)\ndf$r &lt;- sort(df$r)\n\nsum(abs(df$r - df$l))\n\nIt’s more verbose. Most of that comes down to fundamental differences between base R and Polars. In this case - which is common - the R solution uses functions. We also benefit from data.frames being native data structures, and read.table which does two things for us: identifies the delimiter (three whitespace characters), and infers the types correctly (numeric).\nThe Polars solution is fiddlier. The csv parser can only take a single byte delimiter, meaning no regex, no multiple whitespace. I had to look this up, because it seemed frankly idiotic for a modern data processing package, and read the author saying they did this on purpose: It puts speed before anything else, and speed is at the heart of Polars. Doing anything else would go against that. Not so idiotic after all!!!\nAnyway this leads to extra processing because the table gets read as a single string column. When it gets split, it becomes a Polars struct. I didn’t know what a struct actually was, though I saw the name appear in the user guide as I hacked on projects for work. Turns out they’re essentially a typed dictionary.\nstr.split_exact() returns “a struct of n+1 fields”. So the result of\n\nsplit_exact(\"   \", 1)\n\non a row of data like 50123   10023 in a column called column_1 is\n\n{\"column_1\": \"50123\", \"column_2\": \"10023\"}\n\nEvery row gets a dict like that, which taken together are the values in the struct.\nCalling unnest() splits a struct into columns. The column names come from whatever the fields are called.\nSo, all in all, it’s a little bit like an R list-column situation.\nOnce the columns were unnested they were still string and have to be cast to the correct integer type. And then finally we get to do the calculation, which also looks way more verbose to me. One benefit of chaining methods is that you get to see what happens sequentially. That’s not the case with nested function calls, like in the R code. I don’t like the amount of noise in having to refer to columns with pl.col(\"l\"), but it’s not that bad in this case to be honest."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#intro",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#intro",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Intro",
    "text": "Intro\n\n\nFound, by Helvetica Blanc\n\nI know quite a few keyboard shortcuts in RStudio these days.\nThat said, such knowledge has been hard won. My background is not in programming, so a lot of the time I wasn’t aware that certain shortcuts were possible. Or if I did, I may not know how to describe them/their names.\nMuch of my learning has been done by bumbling around, giving it a go, and pairing with colleagues. That’s all good, but it is nice to have a practical list for reference.\nSo, with help from some good peeps over at mastodon, I’m happy to share just such a reference list. The aim is to help get you feeling confident, comfy, and fancy-free when coding in RStudio. It’s nice to feel at home in your IDE of choice ☺️\nI’m a Mac user currently running RStudio 2023.06.1. Please let me know if there’s anything wrong with the Windows/Linux defaults listed."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#keyboard-shortcut-quick-reference",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#keyboard-shortcut-quick-reference",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Keyboard shortcut quick reference",
    "text": "Keyboard shortcut quick reference\n\n : Option + Shift + K\n\n\n /  : Alt + Shift + K\n\nBrings up the keyboard shortcut quick ref.\nHowever, I can never remember the layout of the panel and get mentally overloaded seeing so many symbols and columns on screen at once. I prefer the web version instead (though it is a bit out of date)."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#restart-r-session",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#restart-r-session",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Restart R session",
    "text": "Restart R session\n\n : Command + Shift + 0\n\n\n /  : Ctrl + Shift + F10\n\nGenerally, it’s a good habit to restart the R session regularly. If your global environment is a graveyard of variables and functions - and you can’t tell which are living or dead - this is what you need."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#executing-code",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#executing-code",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Executing code",
    "text": "Executing code\n\n : Command + Enter\n\n\n /  : Ctrl + Enter\n\nExecutes the line, or lines, your cursor is on.\nDo you highlight an entire series of piped functions with your mouse and then click the Run button?\nWhat if I told you that instead, you just put your cursor wherever the hell you like in a pipe and press Command + Enter? And it just runs the whole thing?\n\n\nBehold!\n\nYou can even work your way through a script by hitting Command + Enter on repeat. Don’t trust me?\n\n\nTry this for size.\n\nThat’s right: Even when the focus is in the console (which you can tell because the cursor is blinking there) you can continue hitting Command + Enter to run subsequent lines of your R script."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#switch-focus-between-sourceconsole",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#switch-focus-between-sourceconsole",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Switch focus between Source/Console",
    "text": "Switch focus between Source/Console\n\n /  /  : Your + choice!\n\nToggle the keyboard focus between your script and the console.\nThis is an unbound keyboard shortcut by default. While there are shortcuts to focus individually on the source and console panels, I like this one because it acts like a toggle. Easier to remember than two separate shortcuts. Also my brain small… like cute cat :)\nGo to Tools, Modify Keyboard Shortcuts... and search for “focus”.\n\n\nClick into the empty middle column for Switch Focus Between Source/Console. Press whatever shortcut keys you want to use, then hit enter. I used Control + 1, but this was already assigned to Move Focus to Source so I had to delete it there too."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#indenting-code",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#indenting-code",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Indenting code",
    "text": "Indenting code\n\n : Command + I\n\n\n /  : Ctrl + I\n\nStandardises indentation for highlighted code.\nYou’re typing, copying from the web, moving stuff about. I know it gets messy. Forget tab/space/backspace tedium and use this shortcut."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#commenting-crap",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#commenting-crap",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Commenting crap",
    "text": "Commenting crap\n\n : Command + Shift + C\n\n\n /  : Ctrl + Shift + C\n\nComment/uncomment the line your cursor is on, or highlighted lines. Trust me that this one is worth memorising. You’re going to be using it a lot."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#finding-crap",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#finding-crap",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Finding crap",
    "text": "Finding crap\n\n : Command + F\n\n\n /  : Ctrl + F\n\nBrings up the find/replace menu for the script currently open. The In selection check box is very useful.\n\n\n\n\n\n : Command + Shift + F\n\n\n /  : Ctrl + Shift + F\n\nBrings up the Find in Files dialogue box. I use this when it’s been a while since I worked on a project. For example, I might want to know which files a specific function gets used in."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#inserting-operators",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#inserting-operators",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Inserting operators",
    "text": "Inserting operators\n\n : Option + -\n\n\n /  : Alt + -\n\nDrops in the assignment operator &lt;-\n\n : Command + Shift + M\n\n\n /  : Ctrl + Shift + M\n\nDrops in the pipe operator.\nIf you’ve had RStudio installed for a while the default might be the magrittr pipe %&gt;%. These days, the base R pipe |&gt; has got you covered for 99% of use cases, and doesn’t add yet another dependency or library call to your projects, so it is my preferred pipe.\nIf you want to make it the default, go to Tools, Global Options, and check the box as in the image below."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#using-multiple-caretscursors",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#using-multiple-caretscursors",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Using multiple carets/cursors",
    "text": "Using multiple carets/cursors\nThese are for when you want to do stuff like ‘find and replace’, but the text you’re finding/adding/removing is heterogeneous in some way. You might be tidying up some lines of text after pasting them from a web page, for example.\n\n : Control + Option + Up/Down\n\n\n /  : Ctrl + Alt + Up/Down\n\nAdds carets above/below your current position.\n\n : Option + Click and drag\n\n\n /  : Alt + Click and drag\n\nHighlight text or place carets in contiguous chunks.\n\nClick/move your cursor into the first place you want a caret\nHold down Option\n\nClick and drag the cursor\n\n\n\nIn this example I add carets to multiple contiguous lines of text.\n\n\n : Control + Option + Click\n\n\n /  : Control + Alt + Click\n\nThis is for when things have started to get a little bit messier and you can’t easily highlight text in contiguous chunks.\n\nClick/move your cursor into the first place you want a caret\nThen hold down Control + Option\n\nEach mouse click will place another caret wherever your mouse is hovering\n\n\n\nIn this example I delete several lines across a few blocks of text.\n\n\n\n\n\n\n\nNote\n\n\n\nIn my experience the terms “caret” and “cursor” are are synonymous in programming IDEs like RStudio. However, some IDEs will use “caret” and others “cursor”. One to be aware of."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#moving-the-cursor",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#moving-the-cursor",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Moving the cursor",
    "text": "Moving the cursor\n\n : Command + Up/Down/Left/Right\n\n\n /  : Ctrl + Up/Down/Left/Right\n\nThe up/down keys get you to the top/bottom of a document.\nThe left/right keys get you to the start/end of the current line.\n\n : Option + Left/Right\n\n\n /  : Ctrl + Left/Right\n\nSkip over whole words. Whee!"
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#highlighting-and-deleting-text",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#highlighting-and-deleting-text",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Highlighting and deleting text",
    "text": "Highlighting and deleting text\n\n : Option + Shift + Left/Right\n\n\n /  : Ctrl + Shift + Left/Right\n\nHighlights whole words. Oooh 😮\n\n : Option + Backspace\n\n\n /  : Ctrl + Backspace\n\nDeletes the word preceding the cursor position. Cya 🙋"
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#summon-the-command-palette",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#summon-the-command-palette",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Summon the command palette 👹",
    "text": "Summon the command palette 👹\n\n : Control + Shift + P\n\n\n /  : Ctrl + Shift + P\n\nBringing up the command palette lets you search for commands (and settings) by name. Here I bring up the palette because I can never remember the shortcut to turn some text into a function."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#enclosing",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#enclosing",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Enclosing",
    "text": "Enclosing\nHighlight some text and enclose it with e.g. parentheses () or quotes \"\".\nIf you highlight some text, you only need to give the opening character of the enclosing pair. RStudio will add the closing character.\n\n\nUsing just \", (, and [ to enclose some text."
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html",
    "href": "posts/vs-code-macos-r/post.html",
    "title": "VS Code for R on macOS",
    "section": "",
    "text": "I never thought I’d say this, but… I’m enjoying Visual Studio Code (VS Code) as an IDE for R. I’d even recommend it as an alternative to RStudio for the average R user. This is particularly true if you - like me - are getting interested in languages other than R, such as python.\nSetting it all up isn’t super hard. The essential thing to know is that VS Code is primarily a customisable IDE that relies on extensions to add in support for most languages. For R, there’s a nice, simple guide on the VS Code website specifically for us. Install VS Code, follow the linked guide, and you should be ready to code. There’s also a wiki for the extension that is worth looking at.\nWhat’s more esoteric are the bits and bobs of context you need to start getting the most out of VS Code, particularly if you come from the RStudio world - like I do! So this post contains some of the extra context that I think is worth knowing during/after setup."
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html#rainbow-csv",
    "href": "posts/vs-code-macos-r/post.html#rainbow-csv",
    "title": "VS Code for R on macOS",
    "section": "Rainbow CSV",
    "text": "Rainbow CSV\nI work with a lot of csv and dat files for work, and they require regular inspection. If I needed to look at them outside of R, usually I’d open the file in TextEdit or TextMate if small/simple, or Excel if not.\nBut that’s been massively reduced thanks to this extension, which is very fast and simple. It works on csv, tsv, and dat, with good instructions in the readme for customising behaviour.\n\nYay! That’s nice, right? 🌈\nThere’s a few non-obvious tools available as well. First, when hovering over values it tells you the column name.\nSecond, in the toolbar at the bottom of VS Code, you can see “Query”, and “Align”. These are awesome.\nQuery will open a table-viewer and access to RBQL (rainbow query language), which is basically SQL.\nAlign will align all of the colums by inserting whitespace, and you can then click the same button to shrink the table back. If you are going to do this the docs (and I!) recommend that you put the following in your settings json: It will create a temp file where the alignment and shrinking happens, leaving the original file untouched.\n\n{\n  \"rainbow_csv.align_in_scratch_file\": true\n}\n\n\n\n\n\n\n\nNote\n\n\n\nIf you work with AWS there’s an extension for that, too. You can interact with all your usual services, including S3. Unlike the GUI, you don’t have to download (smaller) files from S3 just to view them. So if you have some csv that needs checking, you can literally just use the file explorer, click the filename, it will open in preview here in VS Code, and it will get the rainbow csv treatment! I think this is very cool!!!"
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html#gitlens",
    "href": "posts/vs-code-macos-r/post.html#gitlens",
    "title": "VS Code for R on macOS",
    "section": "GitLens",
    "text": "GitLens\nIf you work with git this is nice. When you click on a line of code in the editor you get to see the git blame (ugh why is it called that) and commit message. There’s also a GitLens tab with history and graph in the bottom panel."
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html#quarto",
    "href": "posts/vs-code-macos-r/post.html#quarto",
    "title": "VS Code for R on macOS",
    "section": "Quarto",
    "text": "Quarto\nPretty self-explanatory. There’s great support for Quarto in VS Code. That’s how I’m writing this blog post :)"
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html#peacock",
    "href": "posts/vs-code-macos-r/post.html#peacock",
    "title": "VS Code for R on macOS",
    "section": "Peacock",
    "text": "Peacock\nPeacock adds colour to various parts of the VS Code window.\nThe real use for it is in colouring different workspaces. The settings get added to the workspace-specific settings json so they persist over time. If you have a couple of projects that you tend to flick between, the colour can help to orient you by differentiating between the windows."
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html#r-debugger",
    "href": "posts/vs-code-macos-r/post.html#r-debugger",
    "title": "VS Code for R on macOS",
    "section": "R Debugger",
    "text": "R Debugger\nTo be honest I’ve not played with this much yet, or used it at all in earnest. I usually use the native debugger in the REPL. But it does have one enticing feature, which is a variable viewer."
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html#general",
    "href": "posts/vs-code-macos-r/post.html#general",
    "title": "VS Code for R on macOS",
    "section": "General",
    "text": "General\nThese are the ones that I find notable.\n\n\n\n\n\n\nShow/hide\n\n\nCmd + J\nShow/hide the terminal\n\n\nCmd + B\nShow/hide the sidebar\n\n\nEditor\n\n\nCtrl + 1\nFocus on editor\n\n\nCmd + Shift + [ / ]\nCycle left / right through editor windows\n\n\nCmd + W\nClose current editor window\n\n\nOption + ↑ / ↓\nMove current line (or highlighted block) of text up/down\n\n\nCmd + Option + ↑ / ↓\nInsert cursor above or below current position\n\n\nCmd + Shift + V\nPreview markdown file\n\n\nExplorer\n\n\nCmd + Shift + E\nFocus on explorer\n\n\nCmd + ↓\nOpen highlighted file from explorer\n\n\nCtrl + Enter\nOpen highlighted file from explorer (to the side)\n\n\nCmd + ←\nCollapse all folders\n\n\nTerminal\n\n\nCmd + Ctrl + ↑ / ↓\nGrow/shrink the terminal pane\n\n\nCmd + Shift + [ / ]\nCycle left / right through terminals\n\n\nWorkspace\n\n\nCmd + Shift + N\nOpen a new window\n\n\nCmd + O\nOpen a file or folder\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nShrinking the terminal will cause the macOS system beep to kick in, which is annoying as hell. I think this shortcut is so useful that it’s actually worth deactivating the beep. It’s simple to do. First check if you have a file at ~/Library/KeyBindings/DefaultKeyBinding.dict\nIf you do, add the line from the code block below. If you don’t:\n\nCreate the directory ~/Library/KeyBindings\n\nCreate the file DefaultKeyBinding.dict in the new directory\nAdd the below to the file2\n\n\n\n{\n  \"^@\\UF701\" = \"noop:\";\n}\n\nAlternatively, you can make custom keybindings in VS Code (see below for examples of how to do that)."
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html#r-specific",
    "href": "posts/vs-code-macos-r/post.html#r-specific",
    "title": "VS Code for R on macOS",
    "section": "R specific",
    "text": "R specific\nThese should all be familiar if you’re used to RStudio. The Quarto ones come with the Quarto extension.\n\n\n\n\n\n\nRun code\n\n\nCmd + Enter\nRun the current line or highlighted code\n\n\nCmd + Shift + Enter\nRun the entire script\n\n\nQuarto\n\n\nCmd + Shift + K\nRender and show preview\n\n\nCmd + Shift + I\nInsert code chunk"
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html#custom-keybindings",
    "href": "posts/vs-code-macos-r/post.html#custom-keybindings",
    "title": "VS Code for R on macOS",
    "section": "Custom keybindings",
    "text": "Custom keybindings\nLike the settings file, there’s a keybindings.json for any bespoke keyboard shortcuts that you want to make. Open the command palette as before, but this time you’re looking for “Open Keyboard Shortcuts (JSON)”.\nIt is super useful to have something that can toggle between the terminal and editor. You can choose whatever keystrokes you like but Ctrl + ` is a common choice.\n\n[\n  // toggle between the terminal and editor\n  {\n    \"key\": \"ctrl+`\",\n    \"command\": \"workbench.action.terminal.focus\"\n  },\n  {\n    \"key\": \"ctrl+`\",\n    \"command\": \"workbench.action.focusActiveEditorGroup\",\n    \"when\": \"terminalFocus\"\n  }\n]\n\nFor R, most of us have used RStudio extensively and are familiar with three shortcuts, namely\n\n\nInsert pipe (Cmd + Shift + M)\n\nInsert assignment operator (Option + -)\n\nRestart R session (Cmd + Shift + 0)\n\nThe keybindings below will add all of these to VS Code. It might look like there’s some duplication here for the pipe and assignment operator, and there kind of is. It’s just that you need to make the keybindings available to the editor and terminal separately (I tried to combine them but it didn’t work - if anyone knows how please get in touch!).\n\n[\n  // keybindings for r/rmd/qmd\n  {\n    \"key\": \"Cmd+Shift+m\",\n    \"command\": \"type\",\n    \"args\": {\n      \"text\": \" |&gt;\"\n    },\n    \"when\": \"editorTextFocus && editorLangId =~ /r|rmd|quarto/\"\n  },\n  {\n    \"key\": \"Alt+-\",\n    \"command\": \"type\",\n    \"args\": {\n      \"text\": \" &lt;- \"\n    },\n    \"when\": \"editorTextFocus && editorLangId =~ /r|rmd|quarto/\"\n  },\n  // keybindings for R terminal (radian included)\n  {\n    \"key\": \"Cmd+Shift+m\",\n    \"command\": \"workbench.action.terminal.sendSequence\",\n    \"args\": {\n      \"text\": \" |&gt;\"\n    },\n    \"when\": \"terminalFocus\"\n  },\n  {\n    \"key\": \"Alt+-\",\n    \"command\": \"workbench.action.terminal.sendSequence\",\n    \"args\": {\n      \"text\": \" &lt;- \"\n    },\n    \"when\": \"terminalFocus\"\n  },\n  // restart R session\n  {\n    \"key\": \"Cmd+Shift+0\",\n    \"command\": \"runCommands\",\n    \"args\": {\n      \"commands\": [\n        \"workbench.action.terminal.kill\",\n        \"r.createRTerm\"\n      ]\n    }\n  }\n]"
  },
  {
    "objectID": "posts/vs-code-macos-r/post.html#footnotes",
    "href": "posts/vs-code-macos-r/post.html#footnotes",
    "title": "VS Code for R on macOS",
    "section": "Footnotes",
    "text": "Footnotes\n\nIf you want to change default lintr settings see https://github.com/REditorSupport/vscode-R/wiki/Code-linting↩︎\nIf you’re on a version of macOS Sonoma &lt; 14.4, the line should read \"^@\\UF701\" = \"noop\";↩︎"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact me",
    "section": "",
    "text": "Your email  Message"
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html",
    "href": "posts/quarto-code-conditionals/post.html",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "",
    "text": "In this post I will describe some of the ways I’ve found to conditionally include content in a Quarto-generate HTML document.\nI’m using RStudio and the knitr rendering engine. If you know of Jupyter solutions please let me know! I will happily link to them for the disappointed Pythonistas who have ended up on my blog ;)"
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#the-shortcode",
    "href": "posts/quarto-code-conditionals/post.html#the-shortcode",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "The {{< include >}} shortcode",
    "text": "The {{&lt; include &gt;}} shortcode\nThis isn’t conditional, but it is really useful.\nIf you have company marketing boilerplate, or headers that start all of your reports, a neat solution is to keep these in their own qmd file and bring them into any other qmd using the include shortcode.\nIn your report you would use the code below\n{{&lt; include _content.qmd &gt;}}\nThis is akin to manually copying and pasting in the contents of content.qmd prior to the report getting rendered.\nWe’ll come back to the shortcode later."
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#conditional-content",
    "href": "posts/quarto-code-conditionals/post.html#conditional-content",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "Conditional content",
    "text": "Conditional content\nTo my mind this one unfairly hogs the “conditional” title.\nThis is for when you have parts of a document that you only want rendered (or not) to a specific format, such as HTML, PDF, etc.\nIf you’re interested in this, here’s the Quarto guide."
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#project-profiles",
    "href": "posts/quarto-code-conditionals/post.html#project-profiles",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "Project profiles",
    "text": "Project profiles\nIn this scenario you will have content to be included (or excluded) based on the profile/s specified. The div below would only be included if the “advanced” profile is in use\n::: {.content-visible when-profile=\"advanced\"}\nThis content will only appear in the advanced version.\n:::\nYou can also specify configurations in a profile-specific YAML that can be fully, or selectively used, to override those in the default profile. Here are the docs."
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#inline-code",
    "href": "posts/quarto-code-conditionals/post.html#inline-code",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "Inline code",
    "text": "Inline code\nYou can conditionally execute inline code. If my_boolean is TRUE the example below results in a level 2 heading that says “Plots for mtcars”.\n## Plots `r if (params$my_boolean) \"for mtcars\" else \"for iris\"`"
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#in-functions",
    "href": "posts/quarto-code-conditionals/post.html#in-functions",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "In functions",
    "text": "In functions\nSometimes you just need a bit of perspective. Rather than something convoluted, do you just need to make a function with flow control of some kind?\nplotting_func &lt;- function(dat, col1, col2) {\n  \n  if (params$my_boolean) {\n    \n    dat |&gt;\n      ggplot2::ggplot() +\n      ggplot2::geom_point(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    \n  } else {\n    \n    dat |&gt;\n      ggplot2::ggplot() +\n      ggplot2::geom_boxplot(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    \n  }\n  \n}\nOr if the content is amenable to it, something like this\nplotting_func &lt;- function(dat, col1, col2) {\n  \n  dat |&gt;\n    ggplot2::ggplot() +\n    if (params$my_boolean) {\n      ggplot2::geom_point(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    } else {\n      ggplot2::geom_boxplot(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    }\n  \n}\nYou could put the function into a code block. Or you could hide it away in a folder R/ and a script functions.R. That’s useful if you write long ugly functions like me (lol), but also if you have multiple functions. In this case, you could just source the functions silently along with library calls at the start of the Quarto doc.\n```{r}\n#| include: false\nlibrary(dplyr)\nlibrary(downloadthis)\nlibrary(reactable)\nsource(file.path(\"R\", \"functions.R\"))\n```\nIf your content is too complicated for flow control inside of a function, then just put the content into separate functions in functions.R, source them as above, and use flow control in the Quarto doc\n```{r}\nif (params$my_boolean) {\n  fancy_model_a(mtcars, wt, mpg) \n} else {\n  fancy_model_b(iris, Species, Sepal.Length)\n}\n```"
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#knitrknit_child",
    "href": "posts/quarto-code-conditionals/post.html#knitrknit_child",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "knitr::knit_child",
    "text": "knitr::knit_child\nSaving the best for last, because this one is really cool!\nRemember how I started with the {{&lt; include &gt;}} shortcode and said that it wasn’t conditional?\n{{&lt; include _content.qmd &gt;}}\nIf anyone knows how to (simply) use the shortcode in a conditional manner I’d love to hear about it. In the meantime I consider the conditional version of this is using knitr::knit_child.\nLet’s say I make interactive plots of my data using Observable code blocks and keep this code in a separate Quarto doc ojs-cells.qmd. The code can be added to the main Quarto doc under certain conditions, as dictated by a boolean param ojs_include in the YAML header\n```{r}\n#| output: asis\nif (params$ojs_include) { \n  \n  cat(sep = \"\\n\",\n      knitr::knit_child(quiet = TRUE,\n                        text = readr::read_file(\"ojs-cells.qmd\")\n      )\n  )\n  \n}\n```\nWhat’s happening here is\n\n\nreadr::read_file brings in ojs-cells.qmd as a string\n\ncat restores the line-by-line formatting and ‘prints’ the content\nThe output: asis chunk option means Quarto treats the content as raw markdown output\n\nWorth a mention - though not about conditionality - is this demo by Mickaël Canouil. It shows how the knit_child method can be called in a for loop to create n code chunks, and therefore n outputs (like tables and plots). This is great when you don’t know how many plots there will be or even what they are called."
  },
  {
    "objectID": "posts/advent-of-code-2023/post.html",
    "href": "posts/advent-of-code-2023/post.html",
    "title": "Day 1 - Advent of Code 2023",
    "section": "",
    "text": "I did AoC day 1 using base R.\nSpoilers ahead. Also, while this code works, I don’t know how elegant it is or if there are better ways to do parts of it in base. If you have any tips or pointers I’d love to hear them!"
  },
  {
    "objectID": "posts/advent-of-code-2023/post.html#the-problem",
    "href": "posts/advent-of-code-2023/post.html#the-problem",
    "title": "Day 1 - Advent of Code 2023",
    "section": "The problem",
    "text": "The problem\n— Day 1: Trebuchet?! —\nSomething is wrong with global snow production, and you’ve been selected to take a look. The Elves have even given you a map; on it, they’ve used stars to mark the top fifty locations that are likely to be having problems.\nYou’ve been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou try to ask why they can’t just use a weather machine (“not powerful enough”) and where they’re even sending you (“the sky”) and why your map looks mostly blank (“you sure ask a lot of questions”) and hang on did you just say the sky (“of course, where do you think snow comes from”) when you realize that the Elves are already loading you into a trebuchet (“please hold still, we need to strap you in”).\nAs they’re making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\n\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?"
  },
  {
    "objectID": "posts/advent-of-code-2023/post.html#solution",
    "href": "posts/advent-of-code-2023/post.html#solution",
    "title": "Day 1 - Advent of Code 2023",
    "section": "Solution",
    "text": "Solution\n\nlines &lt;- readLines(\"input.txt\")\n\nlines[1:3]\n\n[1] \"mxmkjvgsdzfhseightonetwoeight7\" \"3five4s84four9rtbzllggz\"       \n[3] \"75sevenzdrpkv1onetwo\"          \n\n\n\nmatches &lt;- gregexpr(pattern = \"\\\\d\", text = lines)\ndigits &lt;- regmatches(lines, m = matches)\n\ndigits[1:3]\n\n[[1]]\n[1] \"7\"\n\n[[2]]\n[1] \"3\" \"4\" \"8\" \"4\" \"9\"\n\n[[3]]\n[1] \"7\" \"5\" \"1\"\n\nconcatenated &lt;- lapply(digits, \\(x) {\n  number_of_digits &lt;- length(x)\n\n  # if only one number in a line it gets counted as both the\n  # first AND last number\n  ifelse(\n    number_of_digits == 1,\n    paste0(x, x),\n    paste0(x[1], x[number_of_digits])\n  )\n})\n\nconcatenated[1:3]\n\n[[1]]\n[1] \"77\"\n\n[[2]]\n[1] \"39\"\n\n[[3]]\n[1] \"71\"\n\n\n\nsum(as.integer(unlist(concatenated)))\n\n[1] 55621"
  },
  {
    "objectID": "posts/advent-of-code-2023/post.html#the-problem-1",
    "href": "posts/advent-of-code-2023/post.html#the-problem-1",
    "title": "Day 1 - Advent of Code 2023",
    "section": "The problem",
    "text": "The problem\n— Part Two —\nYour calculation isn’t quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid “digits”.\nEquipped with this new information, you now need to find the real first and last digit on each line. For example:\n\ntwo1nine\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen\n\nIn this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.\nWhat is the sum of all of the calibration values?"
  },
  {
    "objectID": "posts/advent-of-code-2023/post.html#solution-1",
    "href": "posts/advent-of-code-2023/post.html#solution-1",
    "title": "Day 1 - Advent of Code 2023",
    "section": "Solution",
    "text": "Solution\nThis is the point at which I cursed my commitment to doing this in base R. After a few hours I had to look up a hint, and in the process also checked for other solutions in R. Everyone else is just using stringr, dplyr, and/or tidyr. As a result they have reasonably simple regex and are mutating tibbles. I’m out here using functions I don’t fully understand, trying to understand lookarounds, lapplying my way over lists 🥲\nMany of us who got stuck encountered the same issue: overlapping digits in strings. For example, the first two digits from zqtwonethreekcz3seven2 are two and one. In this case it wouldn’t really matter, but without getting overlapping strings separated like this, it could make me count a string like mwnineight as just containing nine, and then I’d end up with the answer as 99.\nAnd unfortunately the example doesn’t mention this at all.\nI managed to get a working regex on regex101.com but of course it didn’t work with gregexpr. Honestly, at this point I’m out of my depth, so just systematically worked through the small number of functions available to me seeing what looked like it worked.\nAnd…\n\n# Expand the regex to include word versions and a positive lookahead assertion, to accommodate for overlapping matches\npattern &lt;- \"(?=(\\\\d)|(one)|(two)|(three)|(four)|(five)|(six)|(seven)|(eight)|(nine))\"\nmatches &lt;- gregexec(pattern = pattern, text = lines, perl = TRUE)\nres &lt;- regmatches(lines, m = matches)\n\nres[[985]]\n\n      [,1]  [,2]  [,3]    [,4] [,5]    [,6]\n [1,] \"\"    \"\"    \"\"      \"\"   \"\"      \"\"  \n [2,] \"\"    \"\"    \"\"      \"3\"  \"\"      \"2\" \n [3,] \"\"    \"one\" \"\"      \"\"   \"\"      \"\"  \n [4,] \"two\" \"\"    \"\"      \"\"   \"\"      \"\"  \n [5,] \"\"    \"\"    \"three\" \"\"   \"\"      \"\"  \n [6,] \"\"    \"\"    \"\"      \"\"   \"\"      \"\"  \n [7,] \"\"    \"\"    \"\"      \"\"   \"\"      \"\"  \n [8,] \"\"    \"\"    \"\"      \"\"   \"\"      \"\"  \n [9,] \"\"    \"\"    \"\"      \"\"   \"seven\" \"\"  \n[10,] \"\"    \"\"    \"\"      \"\"   \"\"      \"\"  \n[11,] \"\"    \"\"    \"\"      \"\"   \"\"      \"\"  \n\n\nThe ffff??? a MATRIX?\nLike most people who use R to work with data but never do statistics, I’ve never. Ever. Interacted with a matrix. I have a vague idea about how to index them.\nBut it turns out they’re easy to collapse and I also got to use one of my fave base functions, nzchar. It returns TRUE for a non-zero length ‘scalar’ character vector, which makes it excellent for logical subsetting.\n\n# Collapse the results into just the matches\ndigits &lt;- lapply(res, \\(x) x[nzchar(x)])\n\ndigits[[985]]\n\n[1] \"two\"   \"one\"   \"three\" \"3\"     \"seven\" \"2\"    \n\n\nFrom here it’s fairly straightforward.\n\nmapping &lt;- stats::setNames(\n  1:9,\n  c(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n)\n\n\nall_numeric &lt;- lapply(digits, \\(x) {\n  mapped &lt;- mapping[x]\n\n  # Backfill the NAs with the original numeric values\n  numeric_indices &lt;- which(is.na(mapped))\n  mapped[numeric_indices] &lt;- x[numeric_indices]\n\n  mapped\n})\n\n\nlength(all_numeric[lengths(all_numeric) == 1])\n\n[1] 62\n\n\nThere are still a small number of lines where there is only a single number, so I’ll stick with the same code from before… yes I am going to copy and paste considering this is so trivial.\n\nconcatenated &lt;- lapply(all_numeric, \\(x) {\n  number_of_digits &lt;- length(x)\n\n  ifelse(\n    number_of_digits == 1,\n    paste0(x, x),\n    paste0(x[1], x[number_of_digits])\n  )\n})\n\nconcatenated[1:3]\n\n[[1]]\n[1] \"87\"\n\n[[2]]\n[1] \"39\"\n\n[[3]]\n[1] \"72\"\n\n\n\nsum(as.integer(unlist(concatenated)))\n\n[1] 53592"
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto/post.html#the-question",
    "href": "posts/interactive-neovim-development-container-r-quarto/post.html#the-question",
    "title": "A containerised Neovim dev environment for R and Quarto",
    "section": "The question",
    "text": "The question\nOver on Mastodon Pete Jones asked the following:\n\n[…] I’ll jump straight to my noob questions which I’m hoping the #Rstats community can help me answer:\n\nDoes anyone have any good recommendations for primers/video tutorials etc that are particularly geared towards (social science) research uses of containers?\nI can see how containers make sense for sharing your research environment at the end of a project for reproducibility, but how sensible is it to be doing all your iterating and exploratory stuff inside a container during the research? Do folks just do all that on their host system and then containerise it when they’re done?\nWhat’s the advantage of using, say, Apptainer versus podman versus something like rix? There seems to be a lot of overlap so it’s hard to know which one to dive into. For context, my coding work is almost entirely in the form of interactive sessions throwing stuff at the REPL and making data visualisations etc, and rarely a scripts-as-jobs type of workflow. In other words, I want to be sat inside a command line environment writing and evaluating code on the fly.\n\n\nMy response was basically that it’s straightforward-ish to use an image with RStudio Server, or VS Code. That’s how I work these days, barely touching the system installation of R.\nIt turns out that Pete uses Neovim as his IDE, so those images aren’t that useful. Thankfully, he recently wrote a nice blog post specifically about using Neovim for interactive R and Quarto work. Reading over that post again, and looking at his nvim config files, the desire to prove it was possible took me over.\nA couple of days later I’m happy to say it is possible. The rest of this post is dedicated to explaining how."
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto/post.html#terminology",
    "href": "posts/interactive-neovim-development-container-r-quarto/post.html#terminology",
    "title": "A containerised Neovim dev environment for R and Quarto",
    "section": "Terminology",
    "text": "Terminology\nContainers aren’t tied to Docker, like most people think. There’s an open source alternative called Podman, and that’s what I used to build and run the container in question. Podman is essentially a drop-in replacement for Docker.\nI also refer to the recipe for the container image not as a Dockerfile, but a Containerfile."
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto/post.html#the-containerfile-explanation",
    "href": "posts/interactive-neovim-development-container-r-quarto/post.html#the-containerfile-explanation",
    "title": "A containerised Neovim dev environment for R and Quarto",
    "section": "The Containerfile explanation",
    "text": "The Containerfile explanation\nHere it is in full.\nOne note to mention is that I haven’t consistently pinned versions throughout. That would definitely be worthwhile, but it takes a bit of time and I don’t have it right now.\nFrom Pete’s config, I knew he would need Python (because the radian R REPL is written in it), R, Quarto, and of course, Neovim. You can see that installing and configuring these different tools happen in short blocks, most of which are heredocs. It’s fine to have small scripts that get copied in and run instead, but I used heredocs so that everything is together in the same file.\nFROM docker.io/library/python:3.13-bookworm\n\n# Python setup. Makes a venv and sets it as the default Python interpreter\nENV VIRTUAL_ENV=/root/.venv\nRUN python -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# Install radian, a Julia-inspired R REPL written in Python\nRUN pip install -U radian\n\nENV R_VERSION=\"4.5.0\"\nENV QUARTO_VERSION=\"1.7.29\"\n\nRUN &lt;&lt;EOF\n# Install R\n# Taken from https://github.com/r-lib/rig?tab=readme-ov-file#installing-rig-on-linux-\n\n# Get their certificate\ncurl -L https://rig.r-pkg.org/deb/rig.gpg -o /etc/apt/trusted.gpg.d/rig.gpg\nsh -c 'echo \"deb http://rig.r-pkg.org/deb rig main\" &gt; /etc/apt/sources.list.d/rig.list'\napt-get update\n\n# Now rig is available to install\napt-get install r-rig\n\n# Install this version of R\nrig add ${R_VERSION}\n\necho \"options(repos = c(CRAN = 'https://packagemanager.posit.co/cran/__linux__/bookworm/latest'))\\n\\n\" &gt;&gt; ~/.Rprofile\nRscript -e \"options(warn = 2); pak::pak(c('knitr', 'rmarkdown', 'languageserver', 'nx10/httpgd'))\"\nEOF\n\nRUN &lt;&lt;EOF\n# Set up the R graphics driver\necho \"if (interactive()) {\\n\n  if ('httpgd' %in% .packages(all.available = TRUE)) {\\n\n    options(device = function(...) {\\n\n      httpgd::hgd(host = '0.0.0.0', port = 9001, token = FALSE)\\n\n    })\\n\n  }\\n\n}\\n\\n\" &gt;&gt; ~/.Rprofile\nEOF\n\nRUN &lt;&lt;EOF\n# Install Quarto.\n# Slightly modified from \n# https://docs.posit.co/resources/install-quarto.html\n\nmkdir -p /opt/quarto/${QUARTO_VERSION}\n\ncurl -o quarto.tar.gz -L \\\n    \"https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz\"\n\ntar -zxvf quarto.tar.gz \\\n    -C \"/opt/quarto/${QUARTO_VERSION}\" \\\n    --strip-components=1\n\nrm quarto.tar.gz\n\n# Symlink so that `quarto` can be used as a command\nln -s /opt/quarto/${QUARTO_VERSION}/bin/quarto /usr/local/bin/quarto\n\n# Verify successful installation\nquarto check\nEOF\n\n# deno is required for one of the plugins\nCOPY --from=denoland/deno:bin /deno /usr/local/bin/deno\n\nRUN &lt;&lt;EOF\n# Neovim plugin system deps\n\napt-get update\napt-get install -y --no-install-recommends ripgrep fd-find\n\n# Instructions for fd from: https://github.com/sharkdp/fd?tab=readme-ov-file#on-debian\nmkdir -p ~/.local/bin/fd\nln -s $(which fdfind) ~/.local/bin/fd\necho 'export PATH=\"$PATH:/$HOME/.local/bin\"' &gt;&gt; ~/.bashrc\nEOF\n\nRUN &lt;&lt;EOF\n# Get Neovim config\n\nmkdir -p ~/.config/nvim\ncurl -o config.tar.gz -L \"https://codeberg.org/pjphd/neovim_config/archive/main.tar.gz\"\ntar -zxvf config.tar.gz -C ~/.config/nvim --strip-components=1\n\nrm config.tar.gz\nEOF\n\nRUN &lt;&lt;EOF\n# Install Neovim\n# Taken from https://github.com/neovim/neovim/blob/master/INSTALL.md#pre-built-archives-2\n\ncurl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz\nrm -rf /opt/nvim\ntar -C /opt -xzf nvim-linux-x86_64.tar.gz\necho 'export PATH=\"$PATH:/opt/nvim-linux-x86_64/bin\"' &gt;&gt; ~/.bashrc\n\nrm nvim-linux-x86_64.tar.gz\nEOF\n\n# Tidy up apt\nRUN apt clean && rm -rf /var/lib/apt/lists/*\n\nCMD /bin/bash\nPython\nFROM docker.io/library/python:3.13-bookworm\n\n# Python setup. Makes a venv and sets it as the default Python interpreter\nENV VIRTUAL_ENV=/root/.venv\nRUN python -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# Install radian, a Julia-inspired R REPL written in Python\nRUN pip install -U radian\nI used an “official” Python base image with version 3.13, and Debian Bookworm as the Linux distro. At time of writing bookworm is the latest release of Debian.\nPython no longer allows you to install packages into the system version of Python. I think that’s fine - virtual environments are great (I wish R’s ecosystem was better in this regard). So here, I make a venv and add that version of Python to the container’s PATH. This means when you invoke python or pip it uses the venv. If you don’t take the step of adding it to the PATH your subsequent RUN commands, e.g. pip installing requirements, will use the system Python installation. Not a lot of people know this so I thought it was worth pointing out. Handily, this also means you never need to source /venv/bin/activate.\nR\nRUN &lt;&lt;EOF\n# Install R\n# Taken from https://github.com/r-lib/rig?tab=readme-ov-file#installing-rig-on-linux-\n\n# Get their certificate\ncurl -L https://rig.r-pkg.org/deb/rig.gpg -o /etc/apt/trusted.gpg.d/rig.gpg\nsh -c 'echo \"deb http://rig.r-pkg.org/deb rig main\" &gt; /etc/apt/sources.list.d/rig.list'\napt-get update\n\n# Now rig is available to install\napt-get install r-rig\n\n# Install this version of R\nrig add ${R_VERSION}\n\necho \"options(repos = c(CRAN = 'https://packagemanager.posit.co/cran/__linux__/bookworm/latest'))\\n\\n\" &gt;&gt; ~/.Rprofile\nRscript -e \"options(warn = 2); pak::pak(c('knitr', 'rmarkdown', 'languageserver', 'nx10/httpgd'))\"\nEOF\n\nRUN &lt;&lt;EOF\n# Set up the R graphics driver\necho \"if (interactive()) {\\n\n  if ('httpgd' %in% .packages(all.available = TRUE)) {\\n\n    options(device = function(...) {\\n\n      httpgd::hgd(host = '0.0.0.0', port = 9001, token = FALSE)\\n\n    })\\n\n  }\\n\n}\\n\\n\" &gt;&gt; ~/.Rprofile\nEOF\nI use rig to install R. Then, I set the CRAN repo to the Posit Public Package Manager, specifically the version with binaries for Bookworm. This means the packages don’t need to build from source so the installation process is nice and fast.\nRig comes with pak, a package installation manager for R. This fantastic package can find and install Linux system dependencies for R packages, which is a real blessing when making your own container. Here I just install the packages I know are required for Quarto (knitr, rmarkdown) and Neovim (languageserver, httpgd).\nSpeaking of httpgd, I add some configuration to the Rprofile for this. The purpose of this package is to offer a graphics device, for viewing plots and HTML. Basically, the browser on your computer can be used to view images provided by httpgd while it runs inside the container.\nQuarto\nRUN &lt;&lt;EOF\n# Install Quarto.\n# Slightly modified from \n# https://docs.posit.co/resources/install-quarto.html\n\nmkdir -p /opt/quarto/${QUARTO_VERSION}\n\ncurl -o quarto.tar.gz -L \\\n    \"https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz\"\n\ntar -zxvf quarto.tar.gz \\\n    -C \"/opt/quarto/${QUARTO_VERSION}\" \\\n    --strip-components=1\n\nrm quarto.tar.gz\n\n# Symlink so that `quarto` can be used as a command\nln -s /opt/quarto/${QUARTO_VERSION}/bin/quarto /usr/local/bin/quarto\n\n# Verify successful installation\nquarto check\nEOF\nThere’s nothing particularly special going on here. I basically just followed Posit’s instructions.\nNeovim dependencies\n# deno is required for one of the plugins\nCOPY --from=denoland/deno:bin /deno /usr/local/bin/deno\n\nRUN &lt;&lt;EOF\n# Neovim plugin system deps\n\napt-get update\napt-get install -y --no-install-recommends ripgrep fd-find\n\n# Instructions for fd from: https://github.com/sharkdp/fd?tab=readme-ov-file#on-debian\nmkdir -p ~/.local/bin/fd\nln -s $(which fdfind) ~/.local/bin/fd\necho 'export PATH=\"$PATH:/$HOME/.local/bin\"' &gt;&gt; ~/.bashrc\nEOF\ndeno is a system dep of peek.nvim, and thankfully they had straightforward instructions that allowed me to copy the binary from one of their own container images.\nPretty much everyone using Neovim will use a plugin called Telescope, which requires fd, and I think ripgrep too.\nNeovim config\nRUN &lt;&lt;EOF\n# Get Neovim config\n\nmkdir -p ~/.config/nvim\ncurl -o config.tar.gz -L \"https://codeberg.org/pjphd/neovim_config/archive/main.tar.gz\"\ntar -zxvf config.tar.gz -C ~/.config/nvim --strip-components=1\n\nrm config.tar.gz\nEOF\nThis grabs Pete’s config files from Codeberg and puts them into the expected place in the file system.\nNeovim\nRUN &lt;&lt;EOF\n# Install Neovim\n# Taken from https://github.com/neovim/neovim/blob/master/INSTALL.md#pre-built-archives-2\n\ncurl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz\nrm -rf /opt/nvim\ntar -C /opt -xzf nvim-linux-x86_64.tar.gz\necho 'export PATH=\"$PATH:/opt/nvim-linux-x86_64/bin\"' &gt;&gt; ~/.bashrc\n\nrm nvim-linux-x86_64.tar.gz\nEOF\nAgain, pretty straightforward - followed instructions provided by the Neovim maintainers.\nTidy and cmd\n# Tidy up apt\nRUN apt clean && rm -rf /var/lib/apt/lists/*\n\nCMD /bin/bash\nThe lists of available packages are just bloat at this point, so I get rid of them. And I add a new cmd, which is what gets run when the container is booted up. In this case it’s just bash, so that the user gets a flexible launch/base point to work from."
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto/post.html#build-the-container",
    "href": "posts/interactive-neovim-development-container-r-quarto/post.html#build-the-container",
    "title": "A containerised Neovim dev environment for R and Quarto",
    "section": "Build the container",
    "text": "Build the container\nThis bit is really simple. In a terminal cd to the directory where the Containerfile lives. Then run:\n\npodman build -t pete . --arch=linux/amd64\n\nIt will take a minute or two depending on your internet and processing power.\npete is the name I’ve given the image. The . just means ‘look in the current directory for the Containerfile’. The --arch=linux/amd64 is to “set the architecture of the image to be built, and that of the base image to be pulled, if the build uses one, to the provided value instead of using the architecture of the build host”. I’m on an arm64 Macbook, which is the build host, but most of the things we’re installing into the image are explicitly the amd64 versions.\nOne thing to bear in mind is the “build context” when you build the image. All the files in the directory containing the Containerfile will get copied into the build context, so that they’ve available for the build. Podman will look like it’s frozen if you have large files in the build context. In reality, it’s copying them. You can either add them to a .Containerignore (aka .Dockerignore) or do the build in a different directory."
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto/post.html#run-the-container",
    "href": "posts/interactive-neovim-development-container-r-quarto/post.html#run-the-container",
    "title": "A containerised Neovim dev environment for R and Quarto",
    "section": "Run the container",
    "text": "Run the container\nBefore running, I made a tiny Quarto file in the same directory as the Containerfile, called index.qmd:\n\n---\ntitle: \"test\"\n---\n\n## Quarto\n\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see &lt;https://quarto.org&gt;.\n\n```{r}\nmtcars\n```\n\n```{r}\nplot(mtcars)\n```\n\nThis is when the magic happens.\nIn the terminal (from the directory with index.qmd) run:\n\npodman run --rm -it -p 9000:9000 -p 9001:9001 -v ./:/test_project pete\n\nThe container will start. We’ve set it up to run with an interactive terminal, forwarding ports 9000 and 9001 from within the container to the same ports on the host machine, and also mounted the current directory to /test_project inside the container.\nThe ports will be used to preview the qmd file and for showing plots made during an interactive R session. The volume mounting means that we can edit the qmd file inside the container and the changes will persist on the host machine - in fact we can also make entirely new files in /test_project and they will appear on the host file system!\nWith the container running, start neovim:\n\nnvim\n\nIt will take a moment to install all of the plugins and LSPs. When it’s done follow any prompts that come up.\nOnce finished, do :tabnew, then :terminal. Go into Insert mode and run:\n\nquarto preview test_project/index.qmd --host 0.0.0.0 --port 9000\n\nIn your web browser, go to localhost:9000. You should see a live preview of the Quarto document.\nNow, in the other nvim tab, let’s :e test_project/index.qmd. Go ahead and change something in the file, and :w. Look at the browser and the doc should update right in front of you.\nFor the cherry on top, let’s start a REPL at the same time and view a plot. With the config at current time of writing localleader is set to Space. Do &lt;localleader&gt;rS, this should open a radian terminal. Now highlight the line of R code plot(mtcars) with Shift + V, then do &lt;localleader&gt;r followed by Return. Radian should say that it’s running a httpgd server. Go to your browser and in a new tab/window go to localhost:9001/live. There’s your plot!\nThis shows how Neovim with a plot viewer and Quarto live preview, plus a ‘live link’ between the container and host file systems is possible."
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto/post.html#is-it-worth-it",
    "href": "posts/interactive-neovim-development-container-r-quarto/post.html#is-it-worth-it",
    "title": "A containerised Neovim dev environment for R and Quarto",
    "section": "Is it worth it?",
    "text": "Is it worth it?\nThe short answer is, I’m not sure.\nR itself is quite mature and so are many of its most well-used packages, so developing on your system and then putting the finished project into a container is fine. Creating a dev environment with a lot of dependencies, like in this case, is fairly involved. It’s also annoying that the Neovim packages have to install every time you start the container, though there may be a solution to that I’ve yet to find.\nAt the same time, once you have a couple of Containerfiles, like this dev one, and another that encapsulates the final project, you’ve got most of what you need for future projects. It’s also amazing how quickly we can adapt to slightly different workflows like this. I think it’s really cool that Neovim can offer the REPL and native terminal. I’m also a believer that the ephemeral nature of containers forces us to be a lot better about capturing code, and making sure it runs from start to end. Too often people rely heavily on the REPL and are scared to restart their IDE in case their analysis no longer works, for some reason."
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto/post.html#two-extra-learnings",
    "href": "posts/interactive-neovim-development-container-r-quarto/post.html#two-extra-learnings",
    "title": "A containerised Neovim dev environment for R and Quarto",
    "section": "Two extra learnings",
    "text": "Two extra learnings\nTwo extras things I learned during this process:\n\nEver wondered about what has gone into a base image that you are using? As in, what did the Containerfile / Dockerfile have in it? That’s possible to get. First run podman image ls and note down the image id of the image you’re interested in. Then use podman history --no-trunc image_id, where image_id is (you guessed it) the image id. The output isn’t clean like a Containerfile - it contains timestamps and suchlike - and it is in reverse order. But it’s still a good one to know, particularly if you find yourself in a situation like I did while making this post: The Containerfile disappeared after a forced laptop restart. Ten minutes of tedious reformatting later, all was repaired.\nHow to close buffers. I used to open files in Neovim sometimes using the :e (alias of :edit) command. I knew that these buffers had to be closed somehow but never figured it out. It’s actually very simple. You can list all buffers with :buffers. Then you can do db #, where # is the number of the buffer to be closed."
  },
  {
    "objectID": "posts/zsh-tosh-pretty-terminal/post.html#overview",
    "href": "posts/zsh-tosh-pretty-terminal/post.html#overview",
    "title": "Making the terminal zsh-tosh on macOS",
    "section": "\n1 Overview",
    "text": "1 Overview\nIn this post I’m going to share a few tools that have made my zsh terminal experience on macOS a little bit nicer.\nThere’s two separate sets of tools. One is to Oh My Zsh with a couple of plugins. The other are so-called modern versions of a couple of commonly used command line tools. The purpose of all these tools is to make the terminal colourful and easier to use.\nAll of the changes here will also apply to terminals in VS Code. If you’re an R programmer using RStudio, I’m sorry, that’s not a nice thing people like us get to have :( a fool! Of course this is possible - though not the default. See Section 4 to see how to make it so."
  },
  {
    "objectID": "posts/zsh-tosh-pretty-terminal/post.html#installation-quick-ref",
    "href": "posts/zsh-tosh-pretty-terminal/post.html#installation-quick-ref",
    "title": "Making the terminal zsh-tosh on macOS",
    "section": "\n2 Installation quick ref",
    "text": "2 Installation quick ref\nAssuming you are putting installs in default locations\n\n2.1 zsh stuff\n\nInstall zsh (if you need to)\n\n\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n\n\nInstall zsh-autosuggestions\n\n\n\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n\nInstall zsh-syntax-highlighting\n\n\n\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git\necho \"source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" &gt;&gt; ${ZDOTDIR:-$HOME}/.zshrc\n\n\nUpdate zshrc\n\n\n# Add the autosuggestions and highliting to the plugins variable like so\n\nplugins=(\n   git\n   zsh-autosuggestions\n   zsh-syntax-highlighting\n)\n\n\nSource\n\n\nsource ~/.zshrc\n\n\n2.2 cli tools\nRequire homebrew\n\nInstall eza\n\n\n\nbrew install eza\n\n\nInstall bat\n\n\n\nbrew install bat\n\nexit your terminal session and start a new one."
  },
  {
    "objectID": "posts/zsh-tosh-pretty-terminal/post.html#context",
    "href": "posts/zsh-tosh-pretty-terminal/post.html#context",
    "title": "Making the terminal zsh-tosh on macOS",
    "section": "\n3 Context",
    "text": "3 Context\n\n3.1 zsh\nzsh has come as the default shell for mac’s terminal since October 2019, with the release of macOS Catalina.\nThe standard experience is perfectly fine, just like bash, but is rather bare bones. There’s no syntax highlighting even for the native shell scripting. In fact, everything is black-and-white by default. I’m not down on zsh or bash as they are. I just prefer some colour to help visually parse wtf I’m looking at.\nIf you’re unsure you have it, run the following to check. You should see something similar to my output.\n\nzsh --version\n\nzsh 5.9 (x86_64-apple-darwin23.0)\n\n\nAlso run this to check that it’s your default shell. You should see the same output as I have here.\n\necho $SHELL\n\n/bin/zsh\n\n\nIf you get command not found or the default shell is something else (like bash), follow the instructions here to install zsh and make it your default.\n\n3.2 Oh My Zsh\nOh My Zsh makes the terminal a bit more colourful and can show you things like which git branch you’re on. I’ve found it quite useful for that alone, and it is really easy to install, with a great default theme.\nzsh has a config file, typically found at ~/.zshrc. What Oh My Zsh does is essentially modify your .zshrc, putting some defaults in and setting things up to further configure as you see fit.\n\n\nOnce installed, you will see something like this\n\nIt doesn’t look like a lot, true.\n\n\nBut once you actually start doing something…\n\nYou can see the shortened current directory, which git branch I’m on (“zsh”, that I’m working in for this blog post), and some colour when calling ls -l.\nOh My Zsh also has loads of plugins to enhance functionality. Most are for working with common tools, languages and frameworks for developers. The plugins I’ve enabled are for syntax highlighting and autosuggestions. The syntax highlighting is nice because if I’m writing a little shell script, or piping a bunch of commands together, it helps me to more quickly visually parse the content. The autosuggestions are a bit like tab completion, but they use your execution history to autosuggest what might come next. This can be useful if you’re doing a repetitive workflow like making regular git commits, or moving back and forth between a small number of directories.\n\n\nAfter adding the plugins to my zshrc using the nano editor, you can see there’s now syntax highlighting in this for loop.\n\n\n\nHere’s an example of an autosuggestion. If I hit the right arrow key it would accept the suggestion.\n\n\n3.3 bat and eza\nBoth bat and eza are “modern” versions of the classic command line tools cat and ls, respectively. The former is for printing the contents of files, and the latter is for listing files and directories.\nbat is particularly nice for several reasons. Let’s look at the contents of my zshrc with cat first\n\n\nzshrc printed with cat\n\nThe output is single-colour, printed via stdout, in full. It’s literally just a dump of the file contents to the screen. Compare that to bat\n\n\nzshrc printed with bat\n\nThat’s more like it. We’ve got syntax highlighting, and the print is paginated a la less. There’s more though - if you have git it shows modifications in the sidebar, it can show all non-printable characters, concatenate files together, and when used in pipes will behave as a drop-in replacement for cat. So all around pretty awesome.\neza I like for two reasons.\nFirst, yes, it’s colour again. You can see in the image below that the return values for eza -l are colourised in comparison to ls -l. And I always use the -l flag, so that matters to me.\nSecond is the tree flag -T. Sometimes a simple tree is all you need to see a project’s structure. The really nice thing about -T is you can combine it with -L (level), and specify a depth. For example if I only wanted to show stuff in the root of my current directory, I can do eza -TL=1. You may also have noticed that the trees are colourised 👀\n\n\nExamples of using eza"
  },
  {
    "objectID": "posts/zsh-tosh-pretty-terminal/post.html#sec-rstudio",
    "href": "posts/zsh-tosh-pretty-terminal/post.html#sec-rstudio",
    "title": "Making the terminal zsh-tosh on macOS",
    "section": "\n4 RStudio settings",
    "text": "4 RStudio settings\nIt’s really simple to make zsh the default terminal in RStudio.\n\n\nIn the Terminal tab, click the down arrow next to Terminal n. Then click Terminal Options\n\n\n\nNew terminals open with: zsh. Then click Apply, and OK\n\n\n\nStart a new terminal and there you go!"
  },
  {
    "objectID": "posts/zsh-tosh-pretty-terminal/post.html#conclusion",
    "href": "posts/zsh-tosh-pretty-terminal/post.html#conclusion",
    "title": "Making the terminal zsh-tosh on macOS",
    "section": "\n5 Conclusion",
    "text": "5 Conclusion\nGo get some colour in your terminal ;)"
  },
  {
    "objectID": "posts/advent-of-code-2023-day-2/post.html",
    "href": "posts/advent-of-code-2023-day-2/post.html",
    "title": "Day 2 - Advent of Code 2023",
    "section": "",
    "text": "AoC day 2 using base R.\nI spent multiple evenings working on this and trying to understand three other programmer’s solutions.\nIf you’re interested in the comparative piece - which you should be because it’s the best part - go to the last section of this post.\nSpoilers ahead."
  },
  {
    "objectID": "posts/advent-of-code-2023-day-2/post.html#the-problem",
    "href": "posts/advent-of-code-2023-day-2/post.html#the-problem",
    "title": "Day 2 - Advent of Code 2023",
    "section": "The problem",
    "text": "The problem\n— Day 2: Cube Conundrum —\nYou’re launched high into the atmosphere! The apex of your trajectory just barely reaches the surface of a large island floating in the sky. You gently land in a fluffy pile of leaves. It’s quite cold, but you don’t see much snow. An Elf runs over to greet you.\nThe Elf explains that you’ve arrived at Snow Island and apologizes for the lack of snow. He’ll be happy to explain the situation, but it’s a bit of a walk, so you have some time. They don’t get many visitors up here; would you like to play a game in the meantime?\nAs you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He’ll do this a few times per game.\nYou play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: …) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).\nFor example, the record of a few games might look like this:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\nIn game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\nIn the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?"
  },
  {
    "objectID": "posts/advent-of-code-2023-day-2/post.html#solution",
    "href": "posts/advent-of-code-2023-day-2/post.html#solution",
    "title": "Day 2 - Advent of Code 2023",
    "section": "Solution",
    "text": "Solution\nFor each game, I just need to know if any of the counts for a colour exceed the possible limits. The subsets of the games are irrelevant, though maybe they’ll be important for part 2 - we’ll see!\n\ngames_raw &lt;- readLines(\"input.txt\")\ngames_raw &lt;- setNames(games_raw, 1:100)\n\ngames_raw[1:3]\n\n                                                                                                                                                      1 \n                                    \"Game 1: 1 red, 3 blue, 11 green; 1 blue, 5 red; 3 blue, 5 green, 13 red; 6 red, 1 blue, 4 green; 16 red, 12 green\" \n                                                                                                                                                      2 \n       \"Game 2: 3 red, 13 blue, 5 green; 14 green, 14 blue; 9 blue, 10 green, 3 red; 2 green, 5 blue; 11 green, 3 blue, 3 red; 16 blue, 2 red, 9 green\" \n                                                                                                                                                      3 \n\"Game 3: 17 blue, 5 red; 3 red, 11 green, 17 blue; 1 red, 6 blue, 9 green; 3 blue, 11 green, 1 red; 3 green, 10 red, 11 blue; 12 red, 3 green, 15 blue\" \n\n\n\nmatches &lt;- gregexpr(pattern = \"\\\\d+ ((red)|(blue)|(green))\", text = games_raw)\ngames &lt;- regmatches(games_raw, m = matches)\n\ngames[1:3]\n\n$`1`\n [1] \"1 red\"    \"3 blue\"   \"11 green\" \"1 blue\"   \"5 red\"    \"3 blue\"  \n [7] \"5 green\"  \"13 red\"   \"6 red\"    \"1 blue\"   \"4 green\"  \"16 red\"  \n[13] \"12 green\"\n\n$`2`\n [1] \"3 red\"    \"13 blue\"  \"5 green\"  \"14 green\" \"14 blue\"  \"9 blue\"  \n [7] \"10 green\" \"3 red\"    \"2 green\"  \"5 blue\"   \"11 green\" \"3 blue\"  \n[13] \"3 red\"    \"16 blue\"  \"2 red\"    \"9 green\" \n\n$`3`\n [1] \"17 blue\"  \"5 red\"    \"3 red\"    \"11 green\" \"17 blue\"  \"1 red\"   \n [7] \"6 blue\"   \"9 green\"  \"3 blue\"   \"11 green\" \"1 red\"    \"3 green\" \n[13] \"10 red\"   \"11 blue\"  \"12 red\"   \"3 green\"  \"15 blue\" \n\n\n\ngames_with_counts_for_colours &lt;- lapply(games, \\(game) {\n  colours &lt;- c(red = \"red\", blue = \"blue\", green = \"green\")\n  lapply(colours, \\(colour) {\n    grep(colour, game, value = TRUE) |&gt;\n      gsub(\" [a-z]+\", \"\", x = _) |&gt;\n      as.integer()\n  })\n})\n\ngames_with_counts_for_colours[1:3]\n\n$`1`\n$`1`$red\n[1]  1  5 13  6 16\n\n$`1`$blue\n[1] 3 1 3 1\n\n$`1`$green\n[1] 11  5  4 12\n\n\n$`2`\n$`2`$red\n[1] 3 3 3 2\n\n$`2`$blue\n[1] 13 14  9  5  3 16\n\n$`2`$green\n[1]  5 14 10  2 11  9\n\n\n$`3`\n$`3`$red\n[1]  5  3  1  1 10 12\n\n$`3`$blue\n[1] 17 17  6  3 11 15\n\n$`3`$green\n[1] 11  9 11  3  3\n\n\n\npossible_games &lt;- sapply(games_with_counts_for_colours, \\(game_rbg_counts) {\n  limits &lt;- c(red = 12, blue = 14, green = 13)\n  Map(\n    \\(count, limit) all(count &lt;= limit),\n    game_rbg_counts,\n    limits\n  ) |&gt;\n    unlist() |&gt;\n    all()\n})\n\npossible_games[1:10]\n\n    1     2     3     4     5     6     7     8     9    10 \nFALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE \n\n\n\npossible_games[possible_games == TRUE] |&gt;\n  names() |&gt;\n  as.integer() |&gt;\n  sum()\n\n[1] 1931"
  },
  {
    "objectID": "posts/advent-of-code-2023-day-2/post.html#the-problem-1",
    "href": "posts/advent-of-code-2023-day-2/post.html#the-problem-1",
    "title": "Day 2 - Advent of Code 2023",
    "section": "The problem",
    "text": "The problem\n— Part Two —\nThe Elf says they’ve stopped producing snow because they aren’t getting any water! He isn’t sure why the water stopped; however, he can show you how to get to the water source to check it out for yourself. It’s just up ahead!\nAs you continue your walk, the Elf poses a second question: in each game you played, what is the fewest number of cubes of each color that could have been in the bag to make the game possible?\nAgain consider the example games from earlier:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\n\nIn game 1, the game could have been played with as few as 4 red, 2 green, and 6 blue cubes. If any color had even one fewer cube, the game would have been impossible.\nGame 2 could have been played with a minimum of 1 red, 3 green, and 4 blue cubes.\nGame 3 must have been played with at least 20 red, 13 green, and 6 blue cubes.\nGame 4 required at least 14 red, 3 green, and 15 blue cubes.\nGame 5 needed no fewer than 6 red, 3 green, and 2 blue cubes in the bag.\n\nThe power of a set of cubes is equal to the numbers of red, green, and blue cubes multiplied together. The power of the minimum set of cubes in game 1 is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these five powers produces the sum 2286.\nFor each game, find the minimum set of cubes that must have been present. What is the sum of the power of these sets?"
  },
  {
    "objectID": "posts/advent-of-code-2023-day-2/post.html#solution-1",
    "href": "posts/advent-of-code-2023-day-2/post.html#solution-1",
    "title": "Day 2 - Advent of Code 2023",
    "section": "Solution",
    "text": "Solution\nThis part is straightforward. For each game I just need to take the maximum value for each colour and multiply them together. Then add those multiplied values up.\nI’ve already done most of the leg work by creating lists of values for each colour, per game.\n\ngames_with_counts_for_colours[1]\n\n$`1`\n$`1`$red\n[1]  1  5 13  6 16\n\n$`1`$blue\n[1] 3 1 3 1\n\n$`1`$green\n[1] 11  5  4 12\n\n\n\nfewest_cubes_per_game &lt;- lapply(games_with_counts_for_colours, \\(game) {\n  sapply(game, \\(colour_values) max(colour_values))\n})\n\nfewest_cubes_per_game[1:3]\n\n$`1`\n  red  blue green \n   16     3    12 \n\n$`2`\n  red  blue green \n    3    16    14 \n\n$`3`\n  red  blue green \n   12    17    11 \n\n\n\nsapply(fewest_cubes_per_game, \\(x) x[[\"red\"]] * x[[\"blue\"]] * x[[\"green\"]]) |&gt;\n  sum()\n\n[1] 83105"
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto-part-2/post.html#another-challenge",
    "href": "posts/interactive-neovim-development-container-r-quarto-part-2/post.html#another-challenge",
    "title": "Accessing R HTML help pages from outside a container",
    "section": "Another challenge!",
    "text": "Another challenge!\nThis is a follow-on about my attempt to make a container that can be used as an interactive Neovim development environment with R and Quarto.\nPete, who started me dancing down the devil’s road in the first place, had a follow-up request:\n\n[…] is there a way to run R’s HTML help server in the container and view it in a browser on the host?\n\nSounds like that should be easy to do. After all, I was able to get the Quarto HTML preview and hdg graphics viewer for R sorted. I bet it’ll take 30 minutes or so!\nHow naive of me."
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto-part-2/post.html#problem-solution",
    "href": "posts/interactive-neovim-development-container-r-quarto-part-2/post.html#problem-solution",
    "title": "Accessing R HTML help pages from outside a container",
    "section": "Problem / solution",
    "text": "Problem / solution\nFor those who don’t know - and this included me before this week - you can launch a website containing all of the help pages for both R’s standard library (base, tools, utils, Matrix, etc.) and user installed packages. You can launch this website by using the help.start() function that comes with R. The more you know.\nThis is useful if, for example, you’re using R in a terminal setting, which as we established last time is what Pete does.\nI quickly found out that the root cause of the problem is within the help.start() function body. Specifically, both help.start() and a function it calls, tools::startDynamicHelp(), have the IP address 127.0.0.1 hard coded into their definitions. This is a problem because HTTP servers running inside containers using 127.0.0.1 can’t be accessed from outside the container. Instead, you have to use 0.0.0.0. Thankfully, it is at least possible to tell R that you always want to use the same port when running the server.\nA few hours later I hit a brick wall and posted about it on Mastodon. R legend Yihui Xie jumped in and replied, kindly telling us exactly what we needed to do. This was very much appreciated – I had clearly gone down a dead end. It gave me hope!\nWhat Yihui turned us onto was a command line tool called socat. You can use it to create proxies and bind ports. In our case, the magic command looked like this:\nsocat TCP-LISTEN:20633,bind=0.0.0.0,fork TCP:127.0.0.1:20000 &\nThis means: Accept traffic (listen) on 0.0.0.0:20633, i.e. receive requests for web pages as we browse the site. Then pass the requests to 127.0.0.1:20000. Fork allows us to handle multiple requests. And the final ampersand tells bash to run the socat process in the background, otherwise socat will make the terminal busy.\nTo put this into practice I added some more R code to ~/.Rprofile during container build time. This is an important file because whenever R starts it runs the code in this file. That means we can use it for performing setup, such as getting socat to forward our traffic. The code looks like this:\n#| eval: false\nif (interactive()) {\n  options('help.ports' = 20000)\n  system('socat TCP-LISTEN:20633,bind=0.0.0.0,fork TCP:127.0.0.1:20000 &')\n\n  cli::cli_h1('HTML help pages')\n  cli::cli_alert_info('Starting httpd help server...')\n\n  resp &lt;- suppressMessages(tools::startDynamicHelp())\n\n  if (resp != 20000) {\n    cli::cli_alert_danger('Failed to start server. Try running {.fn tools::startDynamicHelp} manually to see what happens.')\n    cli::cli_text('')\n  } else {\n    cli::cli_alert_info('If container is running with {.code -p 20633:20633}')\n    cli::cli_alert_info('{.url http://localhost:20633/doc/html/index.html}')\n    cli::cli_text('')\n  }\n\n  rm(resp)\n\n  .Last &lt;- function() {\n    # Attempt to clean up after ourselves when R closes.\n    # When R closes the help pages are no longer served, so we\n    # should also stop socat.\n\n    # A bit of a blunt instrument as it will terminal ALL instances\n    # of socat. But I'm assuming for this container that R help will\n    # be the sole user of the command, so it's safe to do\n    x &lt;- suppressWarnings(system('pgrep socat', intern = TRUE))\n    if (length(x) &gt;= 1L) {\n      system('pgrep socat | xargs kill -9')\n    }\n  }\n}\nWhen starting R with the radian terminal, we get this lovely startup message:\n\n\nThe radian terminal immediately following boot up. Brief messages tell the user that the http server has been started for the HTML help pages.\n\nAs my comments say in the code block, this is a rather inelegant solution. There is the possibility of using the bash command $! in order to get the PID of the socat process ($! gets the PID of the most recent background process) and do a targeted kill. But I found that socat was a bit erratic, sometimes spawning a few processes. Unfortunately the second and third processes weren’t children of the first, otherwise we could have captured the value of $!, say as panret_pid and used pkill -P parent_pid. On the plus side I think this is a very clean solution, insofar as socat will always be started and killed in tandem with R."
  },
  {
    "objectID": "posts/interactive-neovim-development-container-r-quarto-part-2/post.html#how-its-going",
    "href": "posts/interactive-neovim-development-container-r-quarto-part-2/post.html#how-its-going",
    "title": "Accessing R HTML help pages from outside a container",
    "section": "How it’s going",
    "text": "How it’s going\nWell, I wrote this blog post using Neovim from the container in question! That includes previewing the post :)\nThe Containerfile now exists in a GitHub repo. At time of writing there’s no documentation, but I will get to it soon. One thing I’ve noticed is that the container image size is rather large, about 2.7GB. Maybe that’s ok - there is a lot of stuff being installed into it, after all. It’s also very tiresome having the plugins install every time the container is restarted and Neovim gets invoked for the first time. I think it might be possible to simply copy everything from .local/share/nvim/lazy into the GitHub repo and copy it into the image at build time instead, but that requires some experimentation."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jim Gardner",
    "section": "",
    "text": "I am a Data Scientist at Smart Data Foundry. I mainly use  and . I take most pleasure at work in seeing my colleagues thrive, no matter which team or level they are in. In my personal time I love to exercise, garden at Leith Community Croft, and hang with my wife and friends!"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Jim Gardner",
    "section": "Experience",
    "text": "Experience\n Data Scientist\nSmart Data Foundry\n\nSept 2024 - present\n\n Automations Engineer\nPolicy in Practice\n\nSept 2021 - Aug 2024\n\n Research Assistant\nIEB, University of Edinburgh\nSept 2016 - Aug 2021"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Jim Gardner",
    "section": "Education",
    "text": "Education\n MSc Gastronomy (Distinction)\nQueen Margaret University\n\n2016 - 2017\n\n BSc Biological Sciences (1:1)\nHeriot-Watt University\n2012 - 2016"
  }
]