[
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact me",
    "section": "",
    "text": "Your email  Message"
  },
  {
    "objectID": "posts/resources/resources.html#introduction",
    "href": "posts/resources/resources.html#introduction",
    "title": "rresourrces",
    "section": "Introduction",
    "text": "Introduction\nThis is intended to be a constantly evolving list of R resources that I have found helpful, informative, and maybe even fun - or that I intend to check out or use in the future. If they‚Äôre of benefit to you in any way that is great. But truth be told, this is supposed to be of utility for myself, or at the very least a bit of documentation to see where my interest has been caught.\nI came across most of these resources on Mastodon via the creator or a reblogger. Others I picked up from the excellent R Weekly podcast. Yet more are recommendations from my colleagues, or treasures discovered during the bouts of frantic googling that is my job as a technical analyst."
  },
  {
    "objectID": "posts/resources/resources.html#pretty-pictures",
    "href": "posts/resources/resources.html#pretty-pictures",
    "title": "rresourrces",
    "section": "Pretty pictures",
    "text": "Pretty pictures\n\nData Imaginist\nWebsite of self-described ‚Äúclassic generative art weirdo‚Äù Thomas Lin Pedersen. Author of:\n\n{ggfx} - ‚Äúa (currently experimantal) package that allows the use of various filters and shaders on ggplot2 layers‚Äù\n{patchwork} - combine separate ggplots and raster images into the same graphic. I plan to use this with a plot of Twitter employee reviews, placing an image of Elon Musk above the point at which the review scores absolutely tank in late October 2022 \n\n\n\nART FROM CODE\nAmazing-looking workshop by the incredible artist, educator, and general boon to the R community, Danielle Navarro. Originally from rstudio::conf2022, this is an R generative art workshop. Beautifully presented materials. Working my way through as a total genart newb as of late Jan ‚Äô23. I hope to blog about my experience of going through the materials!"
  },
  {
    "objectID": "posts/resources/resources.html#geospatial",
    "href": "posts/resources/resources.html#geospatial",
    "title": "rresourrces",
    "section": "Geospatial",
    "text": "Geospatial\nI‚Äôve made one interactive map and it was mainly done with boilerplate code, so please forgive any imprecision in the wording below!\n\nOpen Geography Portal (ONS)\nI found the GB ward boundaries shapefile very useful for work recently. It contains not just the spatial data for drawing polygons on maps, but also fields like LAD codes/names, which can be used as join keys with other public datasets such as those on the DWP‚Äôs Stat-Xplore.\n\n\n{sf}\nThis seems to be one of the main geospatial data packages in R. Apparently it‚Äôs all about ‚Äúspatial data simplified‚Äù, which I guess is a play on the whole simple features thing. To be honest I could only get it working in the most absolutely simple scenario. I found the docs far, far too daunting for the speed I had to operate for work, and in the end it was (unsurprisingly) google and Stack Overflow that got me sorted. I‚Äôm a rank novice with geospatial stuff so my struggle is more a comment on my knowledge than the sf docs themselves.\nEdit 2022-02-07 I found this Medium post by Trafford Council‚Äôs Trafford Data Lab (GitHub profile) - who do some awesome work - about using the Open Geography Portal API. You can supply an API URL directly to sf::read_sf, which is slick, so I updated my example map below.\n\n\n{leaflet}\nLeaflet is an open-source JavaScript library for making interactive maps. And of course, there is an R binding, because people are wonderful üò≠. It was surprisingly straightforward once I had my spatial data in. Thankfully there are some excellent examples on the package site, and as I needed to make a choropleth (not that I knew it was called that) for a Shiny app, I just stole the example code and tweaked it for my own purposes!\n\nTotal Amount of Benefit per ward, City of Edinburgh (fictional data)\n\n\nCode\nmy_ward <- \"City of Edinburgh\"\n\nmy_ward_api_formatted <- paste0(\"'\", my_ward, \"'\")\n\napi_url <- URLencode(paste0(\n  \"https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Wards_December_2022_Boundaries_GB_BGC/FeatureServer/0/query?\", \n  \"where=LAD22NM=\",\n  my_ward_api_formatted,\n  \"&‚ÄògeometryPrecision=6‚Äô&outFields=*&outSR=4326&f=geojson\"\n))\n\nward_shp <- sf::read_sf(api_url)\n\n# Random numbers to represent a fictional benefit\nbenefit <- tibble::tibble(\n  WD22CD = dplyr::pull(dplyr::filter(ward_shp, LAD22NM == my_ward), WD22CD),\n  benefit_value = rnorm(length(WD22CD)) * 1000\n)\n\n# Ward-specific data for the map\nward <- dplyr::filter(ward_shp, LAD22NM == my_ward) |>\n  dplyr::left_join(benefit, by = \"WD22CD\")\n\n# Format helpers\npal <- leaflet::colorNumeric(\"Greens\", domain = ward$benefit_value)\nthousands <- scales::label_comma()\n\nlabels <- sprintf(\n  \"<strong>%s</strong><br/>%s\",\n  ward$WD22NM, thousands(ward$benefit_value)\n) |> lapply(htmltools::HTML)\n\n# Map time!\nleaflet::leaflet() |>\n  leaflet::addTiles() |>\n  leaflet::addPolygons(\n    data = ward,\n    fillColor = ~pal(benefit_value),\n    weight = 2,\n    opacity = 0.9,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.9,\n    highlightOptions = leaflet::highlightOptions(\n      weight = 3,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.9,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = leaflet::labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")\n  ) |>\n  leaflet::addLegend(\n    pal = pal,\n    values = ward$benefit_value,\n    opacity = 0.9,\n    title = NULL,\n    position = \"topleft\"\n  )"
  },
  {
    "objectID": "posts/resources/resources.html#teaching",
    "href": "posts/resources/resources.html#teaching",
    "title": "rresourrces",
    "section": "Teaching",
    "text": "Teaching\n\nTen quick tips for teaching with (participatory) live coding (online)\nA blog post by Yanina Bellini Saibene. I can‚Äôt help but wonder if the internal R trainings I delivered for analysts at Policy in Practice would have benefited from a fully-fledged participatory approach. A lot to learn from this compendium of well-presented tips based on collected and personal experience, plus guidelines from several organisations."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jim Gardner",
    "section": "",
    "text": "I am a Technical Analyst at Policy in Practice. I mainly use  to smoothen our workflows, and deliver analytics projects for clients. In my personal time I love to boulder, garden at Leith Community Croft, and hang with my wife and friends!"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Jim Gardner",
    "section": "Experience",
    "text": "Experience\n Technical Analyst\nPolicy in Practice\n\nSept 2021 - present\n\n Research Assistant\nIEB, University of Edinburgh\nSept 2016 - Aug 2021"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Jim Gardner",
    "section": "Education",
    "text": "Education\n MSc Gastronomy (Distinction)\nQueen Margaret University\n\n2016 - 2017\n\n BSc Biological Sciences (1:1)\nHeriot-Watt University\n2012 - 2016"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "~ blog",
    "section": "",
    "text": "This is my personal blog. While I may showcase some of my professional work and learning, any opinions expressed are mine alone!\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nComfy keyboard shortcuts for RStudio\n\n\n7 min\n\n\n\nR\n\n\nRStudio\n\n\n\nAimed at beginner and intermediate users\n\n\n\nAug 4, 2023\n\n\n\n\n\n8/5/23, 10:52:38 AM\n\n\n\n\n\n\n\n\n\n\n\nPublishing content in Quarto using conditionals and if/else code flow\n\n\n6 min\n\n\n\nQuarto\n\n\nR\n\n\nknitr\n\n\n\nA selection of simple methods using the knitr engine and HTML output\n\n\n\nApr 24, 2023\n\n\n\n\n\n8/4/23, 11:03:09 PM\n\n\n\n\n\n\n\n\n\n\n\n\n\nrresourrces\n\n\n6 min\n\n\n\nresources\n\n\nR\n\n\n\nR resources I want to/have used\n\n\n\nJan 20, 2023\n\n\n\n\n\n3/12/23, 11:08:46 AM\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/quarto-code-conditionals/script.html",
    "href": "posts/quarto-code-conditionals/script.html",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "",
    "text": "In this post I will describe some of the ways I‚Äôve found to conditionally include content in a Quarto-generate HTML document.\nI‚Äôm using RStudio and the knitr rendering engine. If you know of Jupyter solutions please let me know! I will happily link to them for the disappointed Pythonistas who have ended up on my blog ;)"
  },
  {
    "objectID": "posts/quarto-code-conditionals/script.html#the-include-shortcode",
    "href": "posts/quarto-code-conditionals/script.html#the-include-shortcode",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "The {{< include >}} shortcode",
    "text": "The {{< include >}} shortcode\nThis isn‚Äôt conditional, but it is really useful.\nIf you have company marketing boilerplate, or headers that start all of your reports, a neat solution is to keep these in their own qmd file and bring them into any other qmd using the include shortcode.\nIn your report you would use the code below\n{{< include _content.qmd >}}\nThis is akin to manually copying and pasting in the contents of content.qmd prior to the report getting rendered.\nWe‚Äôll come back to the shortcode later."
  },
  {
    "objectID": "posts/quarto-code-conditionals/script.html#conditional-content",
    "href": "posts/quarto-code-conditionals/script.html#conditional-content",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "Conditional content",
    "text": "Conditional content\nTo my mind this one unfairly hogs the ‚Äúconditional‚Äù title.\nThis is for when you have parts of a document that you only want rendered (or not) to a specific format, such as HTML, PDF, etc.\nIf you‚Äôre interested in this, here‚Äôs the Quarto guide."
  },
  {
    "objectID": "posts/quarto-code-conditionals/script.html#inline-code",
    "href": "posts/quarto-code-conditionals/script.html#inline-code",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "Inline code",
    "text": "Inline code\nYou can conditionally execute inline code. If my_boolean is TRUE the example below results in a level 2 heading that says ‚ÄúPlots for mtcars‚Äù.\n## Plots `r if (params$my_boolean) \"for mtcars\" else \"for iris\"`"
  },
  {
    "objectID": "posts/quarto-code-conditionals/script.html#in-functions",
    "href": "posts/quarto-code-conditionals/script.html#in-functions",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "In functions",
    "text": "In functions\nSometimes you just need a bit of perspective. Rather than something convoluted, do you just need to make a function with flow control of some kind?\nplotting_func <- function(dat, col1, col2) {\n  \n  if (params$my_boolean) {\n    \n    dat |>\n      ggplot2::ggplot() +\n      ggplot2::geom_point(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    \n  } else {\n    \n    dat |>\n      ggplot2::ggplot() +\n      ggplot2::geom_boxplot(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    \n  }\n  \n}\nOr if the content is amenable to it, something like this\nplotting_func <- function(dat, col1, col2) {\n  \n  dat |>\n    ggplot2::ggplot() +\n    if (params$my_boolean) {\n      ggplot2::geom_point(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    } else {\n      ggplot2::geom_boxplot(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    }\n  \n}\nYou could put the function into a code block. Or you could hide it away in a folder R/ and a script functions.R. That‚Äôs useful if you write long ugly functions like me (lol), but also if you have multiple functions. In this case, you could just source the functions silently along with library calls at the start of the Quarto doc.\n```{r}\n#| include: false\nlibrary(dplyr)\nlibrary(downloadthis)\nlibrary(reactable)\nsource(file.path(\"R\", \"functions.R\"))\n```\nIf your content is too complicated for flow control inside of a function, then just put the content into separate functions in functions.R, source them as above, and use flow control in the Quarto doc\n```{r}\nif (params$my_boolean) {\n  fancy_model_a(mtcars, wt, mpg) \n} else {\n  fancy_model_b(iris, Species, Sepal.Length)\n}\n```"
  },
  {
    "objectID": "posts/quarto-code-conditionals/script.html#knitrknit_child",
    "href": "posts/quarto-code-conditionals/script.html#knitrknit_child",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "knitr::knit_child",
    "text": "knitr::knit_child\nSaving the best for last, because this one is really cool!\nRemember how I started with the {{< include >}} shortcode and said that it wasn‚Äôt conditional?\n{{< include _content.qmd >}}\nIf anyone knows how to (simply) use the shortcode in a conditional manner I‚Äôd love to hear about it. In the meantime I consider the conditional version of this is using knitr::knit_child.\nLet‚Äôs say I make interactive plots of my data using Observable code blocks and keep this code in a separate Quarto doc ojs-cells.qmd. The code can be added to the main Quarto doc under certain conditions, as dictated by a boolean param ojs_include in the YAML header\n```{r}\n#| output: asis\nif (params$ojs_include) { \n  \n  cat(sep = \"\\n\",\n      knitr::knit_child(quiet = TRUE,\n                        text = readr::read_file(\"ojs-cells.qmd\")\n      )\n  )\n  \n}\n```\nWhat‚Äôs happening here is\n\nreadr::read_file brings in ojs-cells.qmd as a string\ncat restores the line-by-line formatting and ‚Äòprints‚Äô the content\nThe output: asis chunk option means Quarto treats the content as raw markdown output\n\nWorth a mention - though not about conditionality - is this demo by Micka√´l Canouil. It shows how the knit_child method can be called in a for loop to create n code chunks, and therefore n outputs (like tables and plots). This is great when you don‚Äôt know how many plots there will be or even what they are called."
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html",
    "href": "posts/quarto-code-conditionals/post.html",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "",
    "text": "In this post I will describe some of the ways I‚Äôve found to conditionally include content in a Quarto-generate HTML document.\nI‚Äôm using RStudio and the knitr rendering engine. If you know of Jupyter solutions please let me know! I will happily link to them for the disappointed Pythonistas who have ended up on my blog ;)"
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#the-include-shortcode",
    "href": "posts/quarto-code-conditionals/post.html#the-include-shortcode",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "The {{< include >}} shortcode",
    "text": "The {{&lt; include &gt;}} shortcode\nThis isn‚Äôt conditional, but it is really useful.\nIf you have company marketing boilerplate, or headers that start all of your reports, a neat solution is to keep these in their own qmd file and bring them into any other qmd using the include shortcode.\nIn your report you would use the code below\n{{&lt; include _content.qmd &gt;}}\nThis is akin to manually copying and pasting in the contents of content.qmd prior to the report getting rendered.\nWe‚Äôll come back to the shortcode later."
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#conditional-content",
    "href": "posts/quarto-code-conditionals/post.html#conditional-content",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "Conditional content",
    "text": "Conditional content\nTo my mind this one unfairly hogs the ‚Äúconditional‚Äù title.\nThis is for when you have parts of a document that you only want rendered (or not) to a specific format, such as HTML, PDF, etc.\nIf you‚Äôre interested in this, here‚Äôs the Quarto guide."
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#inline-code",
    "href": "posts/quarto-code-conditionals/post.html#inline-code",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "Inline code",
    "text": "Inline code\nYou can conditionally execute inline code. If my_boolean is TRUE the example below results in a level 2 heading that says ‚ÄúPlots for mtcars‚Äù.\n## Plots `r if (params$my_boolean) \"for mtcars\" else \"for iris\"`"
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#in-functions",
    "href": "posts/quarto-code-conditionals/post.html#in-functions",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "In functions",
    "text": "In functions\nSometimes you just need a bit of perspective. Rather than something convoluted, do you just need to make a function with flow control of some kind?\nplotting_func &lt;- function(dat, col1, col2) {\n  \n  if (params$my_boolean) {\n    \n    dat |&gt;\n      ggplot2::ggplot() +\n      ggplot2::geom_point(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    \n  } else {\n    \n    dat |&gt;\n      ggplot2::ggplot() +\n      ggplot2::geom_boxplot(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    \n  }\n  \n}\nOr if the content is amenable to it, something like this\nplotting_func &lt;- function(dat, col1, col2) {\n  \n  dat |&gt;\n    ggplot2::ggplot() +\n    if (params$my_boolean) {\n      ggplot2::geom_point(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    } else {\n      ggplot2::geom_boxplot(ggplot2::aes({{ col1 }}, {{ col2 }}))\n    }\n  \n}\nYou could put the function into a code block. Or you could hide it away in a folder R/ and a script functions.R. That‚Äôs useful if you write long ugly functions like me (lol), but also if you have multiple functions. In this case, you could just source the functions silently along with library calls at the start of the Quarto doc.\n```{r}\n#| include: false\nlibrary(dplyr)\nlibrary(downloadthis)\nlibrary(reactable)\nsource(file.path(\"R\", \"functions.R\"))\n```\nIf your content is too complicated for flow control inside of a function, then just put the content into separate functions in functions.R, source them as above, and use flow control in the Quarto doc\n```{r}\nif (params$my_boolean) {\n  fancy_model_a(mtcars, wt, mpg) \n} else {\n  fancy_model_b(iris, Species, Sepal.Length)\n}\n```"
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#knitrknit_child",
    "href": "posts/quarto-code-conditionals/post.html#knitrknit_child",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "knitr::knit_child",
    "text": "knitr::knit_child\nSaving the best for last, because this one is really cool!\nRemember how I started with the {{&lt; include &gt;}} shortcode and said that it wasn‚Äôt conditional?\n{{&lt; include _content.qmd &gt;}}\nIf anyone knows how to (simply) use the shortcode in a conditional manner I‚Äôd love to hear about it. In the meantime I consider the conditional version of this is using knitr::knit_child.\nLet‚Äôs say I make interactive plots of my data using Observable code blocks and keep this code in a separate Quarto doc ojs-cells.qmd. The code can be added to the main Quarto doc under certain conditions, as dictated by a boolean param ojs_include in the YAML header\n```{r}\n#| output: asis\nif (params$ojs_include) { \n  \n  cat(sep = \"\\n\",\n      knitr::knit_child(quiet = TRUE,\n                        text = readr::read_file(\"ojs-cells.qmd\")\n      )\n  )\n  \n}\n```\nWhat‚Äôs happening here is\n\nreadr::read_file brings in ojs-cells.qmd as a string\ncat restores the line-by-line formatting and ‚Äòprints‚Äô the content\nThe output: asis chunk option means Quarto treats the content as raw markdown output\n\nWorth a mention - though not about conditionality - is this demo by Micka√´l Canouil. It shows how the knit_child method can be called in a for loop to create n code chunks, and therefore n outputs (like tables and plots). This is great when you don‚Äôt know how many plots there will be or even what they are called."
  },
  {
    "objectID": "posts/quarto-code-conditionals/post.html#project-profiles",
    "href": "posts/quarto-code-conditionals/post.html#project-profiles",
    "title": "Publishing content in Quarto using conditionals and if/else code flow",
    "section": "Project profiles",
    "text": "Project profiles\nIn this scenario you will have content to be included (or excluded) based on the profile/s specified. The div below would only be included if the ‚Äúadvanced‚Äù profile is in use\n::: {.content-visible when-profile=\"advanced\"}\nThis content will only appear in the advanced version.\n:::\nYou can also specify configurations in a profile-specific YAML that can be fully, or selectively used, to override those in the default profile. Here are the docs."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html",
    "href": "posts/rstudio-keyboard-shortcuts/post.html",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "",
    "text": "Shortcuts given here are for MacOS and RStudio 2023.06.1."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#keyboard-shortcut-quick-reference",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#keyboard-shortcut-quick-reference",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Keyboard shortcut quick reference",
    "text": "Keyboard shortcut quick reference\n\n : Option + Shift + K\n\n\n /  : Alt + Shift + K\n\nBrings up the keyboard shortcut quick ref.\nHowever, I can never remember the layout of the panel and get mentally overloaded seeing so many symbols and columns on screen at once. I prefer the web version instead (though it is a bit out of date)."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#executing-code",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#executing-code",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Executing code",
    "text": "Executing code\n\n : Command + Enter\n\n\n /  : Ctrl + Enter\n\nExecutes the line, or lines, your cursor is on.\nDo you highlight an entire series of piped functions with your mouse and then click the Run button?\nWhat if I told you that instead, you just put your cursor wherever the hell you like in a pipe and press Command + Enter? And it just runs the whole thing?\n\n\n\nBehold!\n\n\nYou can even work your way through a script by hitting Command + Enter on repeat. Don‚Äôt trust me?\n\n\n\nTry this for size.\n\n\nThat‚Äôs right: Even when the focus is in the console (which you can tell because the cursor is blinking there) you can continue hitting Command + Enter to run subsequent lines of your R script."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#switch-focus-between-sourceconsole",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#switch-focus-between-sourceconsole",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Switch focus between Source/Console",
    "text": "Switch focus between Source/Console\n\n /  /  : Your + choice!\n\nToggle the keyboard focus between your script and the console.\nThis is an unbound keyboard shortcut by default. While there are shortcuts to focus individually on the source and console panels, I like this one because it acts like a toggle. Easier to remember than two separate shortcuts. Also my brain small‚Ä¶ like cute cat :)\nGo to Tools, Modify Keyboard Shortcuts... and search for ‚Äúfocus‚Äù.\n\n\n\nClick into the empty middle column for Switch Focus Between Source/Console. Press whatever shortcut keys you want to use, then hit enter. I used Control + 1, but this was already assigned to Move Focus to Source so I had to delete it there too."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#indenting-code",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#indenting-code",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Indenting code",
    "text": "Indenting code\n\n : Command + I\n\n\n /  : Ctrl + I\n\nStandardises indentation for highlighted code.\nYou‚Äôre typing, copying from the web, moving stuff about. I know it gets messy. Forget tab/space/backspace tedium and use this shortcut."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#commenting-crap",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#commenting-crap",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Commenting crap",
    "text": "Commenting crap\n\n : Command + Shift + C\n\n\n /  : Ctrl + Shift + C\n\nComment/uncomment the line your cursor is on, or highlighted lines. Trust me that this one is worth memorising. You‚Äôre going to be using it a lot."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#finding-stuff",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#finding-stuff",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Finding stuff",
    "text": "Finding stuff\nCommand + F\nBrings up the find/replace menu for the script currently open. The In selection check box is very useful.\n\n\n\n\n\nShift + Command + F\nBrings up the Find in Files dialogue box. I use this when it‚Äôs been a while since I worked on a project. For example, I might want to know which files a specific function gets used in."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#inserting-operators",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#inserting-operators",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Inserting operators",
    "text": "Inserting operators\n\n : Option + -\n\n\n /  : Alt + -\n\nDrops in the assignment operator &lt;-\n\n : Command + Shift + M\n\n\n /  : Ctrl + Shift + M\n\nDrops in the pipe operator.\nIf you‚Äôve had RStudio installed for a while the default might be the magrittr pipe %&gt;%. These days, the base R pipe |&gt; has got you covered for 99% of use cases, and doesn‚Äôt add yet another dependency or library call to your projects, so it is my preferred pipe.\nIf you want to make it the default, go to Tools, Global Options, and check the box as in the image below."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#using-multiple-caretscursors",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#using-multiple-caretscursors",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Using multiple carets/cursors",
    "text": "Using multiple carets/cursors\nThese are for when you want to do stuff like ‚Äòfind and replace‚Äô, but the text you‚Äôre finding/adding/removing is heterogeneous in some way. You might be tidying up some lines of text after pasting them from a web page, for example.\n\n : Control + Option + Up/Down\n\n\n /  : Ctrl + Alt + Up/Down\n\nAdds carets above/below your current position.\n\n : Option + Click and drag\n\n\n /  : Alt + Click and drag\n\nHighlight text or place carets in contiguous chunks.\n\nClick/move your cursor into the first place you want a caret\nHold down Option\nClick and drag the cursor\n\n\n\n\nIn this example I add carets to multiple contiguous lines of text.\n\n\n\n : Control + Option + Click\n\n\n /  : Anyone know? Hit me up\n\nThis is for when things have started to get a little bit messier and you can‚Äôt easily highlight text in contiguous chunks.\n\nClick/move your cursor into the first place you want a caret\nThen hold down Control + Option\nEach mouse click will place another caret wherever your mouse is hovering\n\n\n\n\nIn this example I delete several lines across a few blocks of text.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn my experience the terms ‚Äúcaret‚Äù and ‚Äúcursor‚Äù are are synonymous in programming IDEs like RStudio. However, some IDEs will use ‚Äúcaret‚Äù and others ‚Äúcursor‚Äù. One to be aware of."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#moving-the-cursor",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#moving-the-cursor",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Moving the cursor",
    "text": "Moving the cursor\n\n : Command + Up/Down/Left/Right\n\n\n /  : Ctrl + Up/Down/Left/Right\n\nThe up/down keys get you to the top/bottom of a document.\nThe left/right keys get you to the start/end of the current line.\n\n : Option + Left/Right\n\n\n /  : Ctrl + Left/Right\n\nSkip over whole words. Whee!"
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#highlighting-and-deleting-text",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#highlighting-and-deleting-text",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Highlighting and deleting text",
    "text": "Highlighting and deleting text\n\n : Option + Shift + Left/Right\n\n\n /  : Ctrl + Shift + Left/Right\n\nHighlights whole words. Oooh üòÆ\n\n : Option + Backspace\n\n\n /  : Ctrl + Backspace\n\nDeletes the word preceding the cursor position. Cya üôã"
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#summon-the-command-palette",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#summon-the-command-palette",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Summon the command palette üëπ",
    "text": "Summon the command palette üëπ\n\n : Control + Shift + P\n\n\n /  : Ctrl + Shift + P\n\nBringing up the command palette lets you search for commands (and settings) by name. Here I bring up the palette because I can never remember the shortcut to turn some text into a function."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#enclosing",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#enclosing",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Enclosing",
    "text": "Enclosing\nHighlight some text and enclose it with e.g.¬†parentheses () or quotes \"\".\nIf you highlight some text, you only need to give the opening character of the enclosing pair. RStudio will add the closing character.\n\n\n\nUsing just \", (, and [ to enclose some text."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#intro",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#intro",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Intro",
    "text": "Intro\nI know quite a few keyboard shortcuts in RStudio these days.\nThat said, such knowledge has been hard won. My background is not in programming, so a lot of the time I wasn‚Äôt aware that certain shortcuts were possible. Or if I did, I may not know how to describe them/their names.\nA lot of my knowledge was gleaned through bumbling around, giving it a go, and pairing with colleagues. That‚Äôs all good, but it is nice to have a practical list for reference.\nSo, with help from some good peeps over at mastodon, I‚Äôm happy to share just such a reference list. The aim is to help get you feeling confident, comfy, and fancy-free when coding in RStudio. It‚Äôs nice to feel at home in your IDE of choice ‚ò∫Ô∏è\nI‚Äôm a Mac user currently running RStudio 2023.06.1. Please let me know if there‚Äôs anything wrong with the Windows/Linux defaults listed."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#finding-crap",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#finding-crap",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Finding crap",
    "text": "Finding crap\n\n : Command + F\n\n\n /  : Ctrl + F\n\nBrings up the find/replace menu for the script currently open. The In selection check box is very useful.\n\n\n\n\n\n\n : Command + Shift + F\n\n\n /  : Ctrl + Shift + F\n\nBrings up the Find in Files dialogue box. I use this when it‚Äôs been a while since I worked on a project. For example, I might want to know which files a specific function gets used in."
  },
  {
    "objectID": "posts/rstudio-keyboard-shortcuts/post.html#restart-r-session",
    "href": "posts/rstudio-keyboard-shortcuts/post.html#restart-r-session",
    "title": "Comfy keyboard shortcuts for RStudio",
    "section": "Restart R session",
    "text": "Restart R session\n\n : Command + Shift + 0\n\n\n /  : Ctrl + Shift + F10\n\nGenerally, it‚Äôs a good habit to restart the R session regularly. If your global environment is a graveyard of variables and functions - and you can‚Äôt tell which are living or dead - this is what you need."
  }
]